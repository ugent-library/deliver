// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/deliver/ent/folder"
	"github.com/ugent-library/deliver/ent/space"
)

// SpaceCreate is the builder for creating a Space entity.
type SpaceCreate struct {
	config
	mutation *SpaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *SpaceCreate) SetName(s string) *SpaceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetAdmins sets the "admins" field.
func (sc *SpaceCreate) SetAdmins(s []string) *SpaceCreate {
	sc.mutation.SetAdmins(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SpaceCreate) SetCreatedAt(t time.Time) *SpaceCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableCreatedAt(t *time.Time) *SpaceCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SpaceCreate) SetUpdatedAt(t time.Time) *SpaceCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableUpdatedAt(t *time.Time) *SpaceCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SpaceCreate) SetID(s string) *SpaceCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableID(s *string) *SpaceCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddFolderIDs adds the "folders" edge to the Folder entity by IDs.
func (sc *SpaceCreate) AddFolderIDs(ids ...string) *SpaceCreate {
	sc.mutation.AddFolderIDs(ids...)
	return sc
}

// AddFolders adds the "folders" edges to the Folder entity.
func (sc *SpaceCreate) AddFolders(f ...*Folder) *SpaceCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFolderIDs(ids...)
}

// Mutation returns the SpaceMutation object of the builder.
func (sc *SpaceCreate) Mutation() *SpaceMutation {
	return sc.mutation
}

// Save creates the Space in the database.
func (sc *SpaceCreate) Save(ctx context.Context) (*Space, error) {
	sc.defaults()
	return withHooks[*Space, SpaceMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpaceCreate) SaveX(ctx context.Context) *Space {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpaceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpaceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SpaceCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := space.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := space.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := space.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpaceCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Space.name"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Space.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Space.updated_at"`)}
	}
	return nil
}

func (sc *SpaceCreate) sqlSave(ctx context.Context) (*Space, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Space.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SpaceCreate) createSpec() (*Space, *sqlgraph.CreateSpec) {
	var (
		_node = &Space{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(space.Table, sqlgraph.NewFieldSpec(space.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(space.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Admins(); ok {
		_spec.SetField(space.FieldAdmins, field.TypeJSON, value)
		_node.Admins = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(space.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(space.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.FoldersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   space.FoldersTable,
			Columns: []string{space.FoldersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: folder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Space.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpaceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sc *SpaceCreate) OnConflict(opts ...sql.ConflictOption) *SpaceUpsertOne {
	sc.conflict = opts
	return &SpaceUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Space.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SpaceCreate) OnConflictColumns(columns ...string) *SpaceUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SpaceUpsertOne{
		create: sc,
	}
}

type (
	// SpaceUpsertOne is the builder for "upsert"-ing
	//  one Space node.
	SpaceUpsertOne struct {
		create *SpaceCreate
	}

	// SpaceUpsert is the "OnConflict" setter.
	SpaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SpaceUpsert) SetName(v string) *SpaceUpsert {
	u.Set(space.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SpaceUpsert) UpdateName() *SpaceUpsert {
	u.SetExcluded(space.FieldName)
	return u
}

// SetAdmins sets the "admins" field.
func (u *SpaceUpsert) SetAdmins(v []string) *SpaceUpsert {
	u.Set(space.FieldAdmins, v)
	return u
}

// UpdateAdmins sets the "admins" field to the value that was provided on create.
func (u *SpaceUpsert) UpdateAdmins() *SpaceUpsert {
	u.SetExcluded(space.FieldAdmins)
	return u
}

// ClearAdmins clears the value of the "admins" field.
func (u *SpaceUpsert) ClearAdmins() *SpaceUpsert {
	u.SetNull(space.FieldAdmins)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SpaceUpsert) SetUpdatedAt(v time.Time) *SpaceUpsert {
	u.Set(space.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SpaceUpsert) UpdateUpdatedAt() *SpaceUpsert {
	u.SetExcluded(space.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Space.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(space.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SpaceUpsertOne) UpdateNewValues() *SpaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(space.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(space.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Space.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SpaceUpsertOne) Ignore() *SpaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpaceUpsertOne) DoNothing() *SpaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpaceCreate.OnConflict
// documentation for more info.
func (u *SpaceUpsertOne) Update(set func(*SpaceUpsert)) *SpaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SpaceUpsertOne) SetName(v string) *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SpaceUpsertOne) UpdateName() *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateName()
	})
}

// SetAdmins sets the "admins" field.
func (u *SpaceUpsertOne) SetAdmins(v []string) *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.SetAdmins(v)
	})
}

// UpdateAdmins sets the "admins" field to the value that was provided on create.
func (u *SpaceUpsertOne) UpdateAdmins() *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateAdmins()
	})
}

// ClearAdmins clears the value of the "admins" field.
func (u *SpaceUpsertOne) ClearAdmins() *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.ClearAdmins()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SpaceUpsertOne) SetUpdatedAt(v time.Time) *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SpaceUpsertOne) UpdateUpdatedAt() *SpaceUpsertOne {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SpaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SpaceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SpaceUpsertOne.ID is not supported by MySQL driver. Use SpaceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SpaceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SpaceCreateBulk is the builder for creating many Space entities in bulk.
type SpaceCreateBulk struct {
	config
	builders []*SpaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Space entities in the database.
func (scb *SpaceCreateBulk) Save(ctx context.Context) ([]*Space, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Space, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpaceCreateBulk) SaveX(ctx context.Context) []*Space {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpaceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpaceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Space.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpaceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (scb *SpaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *SpaceUpsertBulk {
	scb.conflict = opts
	return &SpaceUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Space.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SpaceCreateBulk) OnConflictColumns(columns ...string) *SpaceUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SpaceUpsertBulk{
		create: scb,
	}
}

// SpaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Space nodes.
type SpaceUpsertBulk struct {
	create *SpaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Space.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(space.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SpaceUpsertBulk) UpdateNewValues() *SpaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(space.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(space.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Space.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SpaceUpsertBulk) Ignore() *SpaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpaceUpsertBulk) DoNothing() *SpaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpaceCreateBulk.OnConflict
// documentation for more info.
func (u *SpaceUpsertBulk) Update(set func(*SpaceUpsert)) *SpaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SpaceUpsertBulk) SetName(v string) *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SpaceUpsertBulk) UpdateName() *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateName()
	})
}

// SetAdmins sets the "admins" field.
func (u *SpaceUpsertBulk) SetAdmins(v []string) *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.SetAdmins(v)
	})
}

// UpdateAdmins sets the "admins" field to the value that was provided on create.
func (u *SpaceUpsertBulk) UpdateAdmins() *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateAdmins()
	})
}

// ClearAdmins clears the value of the "admins" field.
func (u *SpaceUpsertBulk) ClearAdmins() *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.ClearAdmins()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SpaceUpsertBulk) SetUpdatedAt(v time.Time) *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SpaceUpsertBulk) UpdateUpdatedAt() *SpaceUpsertBulk {
	return u.Update(func(s *SpaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SpaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SpaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
