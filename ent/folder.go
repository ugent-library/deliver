// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/dilliver/ent/folder"
	"github.com/ugent-library/dilliver/ent/space"
)

// Folder is the model entity for the Folder schema.
type Folder struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FolderQuery when eager-loading is set.
	Edges         FolderEdges `json:"edges"`
	space_folders *string
}

// FolderEdges holds the relations/edges for other nodes in the graph.
type FolderEdges struct {
	// Space holds the value of the space edge.
	Space *Space `json:"space,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SpaceOrErr returns the Space value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FolderEdges) SpaceOrErr() (*Space, error) {
	if e.loadedTypes[0] {
		if e.Space == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: space.Label}
		}
		return e.Space, nil
	}
	return nil, &NotLoadedError{edge: "space"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FolderEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Folder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case folder.FieldID:
			values[i] = new(sql.NullString)
		case folder.ForeignKeys[0]: // space_folders
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Folder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Folder fields.
func (f *Folder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case folder.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case folder.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_folders", values[i])
			} else if value.Valid {
				f.space_folders = new(string)
				*f.space_folders = value.String
			}
		}
	}
	return nil
}

// QuerySpace queries the "space" edge of the Folder entity.
func (f *Folder) QuerySpace() *SpaceQuery {
	return (&FolderClient{config: f.config}).QuerySpace(f)
}

// QueryFiles queries the "files" edge of the Folder entity.
func (f *Folder) QueryFiles() *FileQuery {
	return (&FolderClient{config: f.config}).QueryFiles(f)
}

// Update returns a builder for updating this Folder.
// Note that you need to call Folder.Unwrap() before calling this method if this Folder
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Folder) Update() *FolderUpdateOne {
	return (&FolderClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Folder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Folder) Unwrap() *Folder {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Folder is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Folder) String() string {
	var builder strings.Builder
	builder.WriteString("Folder(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Folders is a parsable slice of Folder.
type Folders []*Folder

func (f Folders) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
