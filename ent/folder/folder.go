// Code generated by ent, DO NOT EDIT.

package folder

const (
	// Label holds the string label denoting the folder type in the database.
	Label = "folder"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeSpace holds the string denoting the space edge name in mutations.
	EdgeSpace = "space"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// Table holds the table name of the folder in the database.
	Table = "folders"
	// SpaceTable is the table that holds the space relation/edge.
	SpaceTable = "folders"
	// SpaceInverseTable is the table name for the Space entity.
	// It exists in this package in order to avoid circular dependency with the "space" package.
	SpaceInverseTable = "spaces"
	// SpaceColumn is the table column denoting the space relation/edge.
	SpaceColumn = "space_folders"
	// FilesTable is the table that holds the files relation/edge.
	FilesTable = "files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "folder_files"
)

// Columns holds all SQL columns for folder fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "folders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"space_folders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)
