// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"net/url"
	"strconv"

	"github.com/ugent-library/deliver/models"
)

type PaginationArgs struct {
	pagination     *models.Pagination
	baseHref       *url.URL
	baseHtmxGetUrl *url.URL
	target         string
}

func generatePagedURL(baseUrl *url.URL, page int, pagination *models.Pagination) url.URL {
	newUrl := *baseUrl
	query := newUrl.Query()

	pairs := pagination.ToPairs()
	for i := 0; i < len(pairs); i += 2 {
		query.Set(pairs[i], pairs[i+1])
	}

	newOffset := pagination.PageOffset(page)
	if newOffset > 0 {
		query.Set("offset", strconv.Itoa(newOffset))
	} else {
		query.Del("offset")
	}

	newUrl.RawQuery = query.Encode()

	return newUrl
}

func Pagination(args PaginationArgs) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"bc-toolbar\"><div class=\"bc-toolbar-left\"><div class=\"bc-toolbar-item\"><nav><ul class=\"pagination\" hx-target=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(args.target))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-swap=\"innerHTML\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = PaginationButton(PaginationButtonArgs{
			disabled: args.pagination.Offset() == 0,
			icon:     "if-chevron-left",
			href:     generatePagedURL(args.baseHref, args.pagination.CurrentPage()-1, args.pagination),
			htmxGet:  generatePagedURL(args.baseHtmxGetUrl, args.pagination.CurrentPage()-1, args.pagination),
			attrs: templ.Attributes{
				"aria-label": "Previous",
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, page := range args.pagination.VisiblePages() {
			if page > 0 {
				templ_7745c5c3_Err = PaginationButton(PaginationButtonArgs{
					active:   page == args.pagination.CurrentPage(),
					contents: strconv.Itoa(page),
					href:     generatePagedURL(args.baseHref, page, args.pagination),
					htmxGet:  generatePagedURL(args.baseHtmxGetUrl, page, args.pagination),
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = PaginationButton(PaginationButtonArgs{
					disabled: true,
					icon:     "if-more",
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = PaginationButton(PaginationButtonArgs{
			disabled: args.pagination.EndOfPage() == args.pagination.Total(),
			icon:     "if-chevron-right",
			href:     generatePagedURL(args.baseHref, args.pagination.CurrentPage()+1, args.pagination),
			htmxGet:  generatePagedURL(args.baseHtmxGetUrl, args.pagination.CurrentPage()+1, args.pagination),
			attrs: templ.Attributes{
				"aria-label": "Next",
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</ul></nav></div></div><div class=\"bc-toolbar-right\"><div class=\"bc-toolbar-item\"><span class=\"text-muted c-body-small\">Showing ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(args.pagination.PaginationString())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pagination.templ`, Line: 83, Col: 49}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" folder(s)</span></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
