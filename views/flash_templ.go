// Code generated by templ@v0.2.364 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/ugent-library/deliver/ctx"
)

func AddFlash(f ctx.Flash) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-swap-oob=\"beforeend:#flash-messages\">")
		if err != nil {
			return err
		}
		err = flash(f).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func flash(f ctx.Flash) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"><div class=\"toast-body\">")
		if err != nil {
			return err
		}
		switch f.Type {
		case "success":
			_, err = templBuffer.WriteString("<i class=\"if if--success if-check-circle-fill\"></i>")
			if err != nil {
				return err
			}
		case "info":
			_, err = templBuffer.WriteString("<i class=\"if if--primary if-info-circle-filled\"></i>")
			if err != nil {
				return err
			}
		case "warning":
			_, err = templBuffer.WriteString("<i class=\"if if--warning if-alert-fill\"></i>")
			if err != nil {
				return err
			}
		case "error":
			_, err = templBuffer.WriteString("<i class=\"if if--error if-error-circle-fill\"></i>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div class=\"toast-content\">")
		if err != nil {
			return err
		}
		if f.Title != "" {
			_, err = templBuffer.WriteString("<h3 class=\"alert-title\">")
			if err != nil {
				return err
			}
			var var_3 string = f.Title
			_, err = templBuffer.WriteString(templ.EscapeString(var_3))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var var_4 string = f.Body
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><button class=\"btn-close\" type=\"button\" aria-label=\"Close\" data-bs-dismiss=\"toast\"")
		if err != nil {
			return err
		}
		if f.DismissAfter != 0 {
			_, err = templBuffer.WriteString(" data-delay=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(f.DismissAfter.Milliseconds())))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString(" data-autohide=\"false\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("><i class=\"if if-close\"></i></button></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
