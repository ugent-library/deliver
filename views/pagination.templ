package views

import (
	"strconv"
	"net/url"

	"github.com/ugent-library/deliver/models"
)

type PaginationArgs struct {
	pagination *models.Pagination
	href       *url.URL
	target     string
}

func generatePagedURL(args PaginationArgs, page int) string {
	query := args.href.Query()

	pairs := args.pagination.ToPairs()
	for i := 0; i < len(pairs); i += 2 {
		query.Set(pairs[i], pairs[i+1])
	}

	newOffset := args.pagination.PageOffset(page)
	if newOffset > 0 {
		query.Set("offset", strconv.Itoa(newOffset))
	} else {
		query.Del("offset")
	}

	args.href.RawQuery = query.Encode()

	return args.href.String()
}

templ Pagination(args PaginationArgs) {
	<div class="bc-toolbar">
		<div class="bc-toolbar-left">
			<div class="bc-toolbar-item">
				<nav>
					<ul class="pagination" hx-target={ args.target } hx-swap="innerHTML">
						@PaginationButton(PaginationButtonArgs{
							disabled: args.pagination.Offset() == 0,
							icon:     "if-chevron-left",
							htmxGet:  generatePagedURL(args, args.pagination.CurrentPage()-1),
							attrs: templ.Attributes{
								"aria-label": "Previous",
							},
						})
						for _, page := range args.pagination.VisiblePages() {
							if page > 0 {
								@PaginationButton(PaginationButtonArgs{
									active:   page == args.pagination.CurrentPage(),
									contents: strconv.Itoa(page),
									htmxGet:  generatePagedURL(args, page),
								})
							} else {
								@PaginationButton(PaginationButtonArgs{
									disabled: true,
									icon:     "if-more",
								})
							}
						}
						@PaginationButton(PaginationButtonArgs{
							disabled: args.pagination.EndOfPage() == args.pagination.Total(),
							icon:     "if-chevron-right",
							htmxGet:  generatePagedURL(args, args.pagination.CurrentPage()+1),
							attrs: templ.Attributes{
								"aria-label": "Next",
							},
						})
					</ul>
				</nav>
			</div>
		</div>
		<div class="bc-toolbar-right">
			<div class="bc-toolbar-item">
				<span class="text-muted c-body-small">
					Showing { args.pagination.PaginationString() } folder(s)
				</span>
			</div>
		</div>
	</div>
}
