/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bootstrap.native/dist/bootstrap-native-v4 */ \"./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\");\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _bootstrap_popper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bootstrap_popper.js */ \"./assets/js/bootstrap_popper.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toast_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toast.js */ \"./assets/js/toast.js\");\n/* harmony import */ var _form_submit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form_submit.js */ \"./assets/js/form_submit.js\");\n/* harmony import */ var _form_upload_progress_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./form_upload_progress.js */ \"./assets/js/form_upload_progress.js\");\n/* harmony import */ var _modal_close_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modal_close.js */ \"./assets/js/modal_close.js\");\n/* harmony import */ var _clipboard_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./clipboard.js */ \"./assets/js/clipboard.js\");\n\n\n\n\n\n\n\n\n\n// configure htmx\n(htmx_org__WEBPACK_IMPORTED_MODULE_2___default().config.defaultFocusScroll) = true;\nhtmx_org__WEBPACK_IMPORTED_MODULE_2___default().onLoad(function (rootEl) {\n  bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_0___default().initCallback(rootEl);\n  (0,_bootstrap_popper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rootEl);\n  (0,_toast_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(rootEl);\n  (0,_form_submit_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(rootEl);\n  (0,_form_upload_progress_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rootEl);\n  (0,_modal_close_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(rootEl);\n  (0,_clipboard_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rootEl);\n});\nwindow.htmx = (htmx_org__WEBPACK_IMPORTED_MODULE_2___default());\ndocument.body.addEventListener('htmx:configRequest', function (evt) {\n  evt.detail.headers['X-CSRF-Token'] = document.querySelector('meta[name=\"csrf_token\"]').content;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTREO0FBQ1Q7QUFDeEI7QUFDRztBQUNXO0FBQ2lCO0FBQ2pCO0FBQ0g7O0FBRXRDO0FBQ0FFLDJFQUE4QixHQUFHLElBQUk7QUFDckNBLHNEQUFXLENBQUMsVUFBU1MsTUFBTSxFQUFFO0VBQ3pCWCw2RkFBZ0IsQ0FBQ1csTUFBTSxDQUFDO0VBQ3hCVixnRUFBZSxDQUFDVSxNQUFNLENBQUM7RUFDdkJSLHFEQUFLLENBQUNRLE1BQU0sQ0FBQztFQUNiUCwyREFBVSxDQUFDTyxNQUFNLENBQUM7RUFDbEJOLG9FQUFrQixDQUFDTSxNQUFNLENBQUM7RUFDMUJMLDJEQUFVLENBQUNLLE1BQU0sQ0FBQztFQUNsQkoseURBQVMsQ0FBQ0ksTUFBTSxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUVGRSxNQUFNLENBQUNYLElBQUksR0FBR0EsaURBQUk7QUFFbEJZLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDQyxHQUFHLEVBQUs7RUFDMURBLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUdMLFFBQVEsQ0FBQ00sYUFBYSxDQUFDLHlCQUF5QixDQUFDLENBQUNDLE9BQU87QUFDbEcsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2FwcC5qcz8yNWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCU04gZnJvbSAnYm9vdHN0cmFwLm5hdGl2ZS9kaXN0L2Jvb3RzdHJhcC1uYXRpdmUtdjQnO1xuaW1wb3J0IGJvb3RzdHJhcFBvcHBlciBmcm9tICcuL2Jvb3RzdHJhcF9wb3BwZXIuanMnXG5pbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZydcbmltcG9ydCB0b2FzdCBmcm9tICcuL3RvYXN0LmpzJ1xuaW1wb3J0IGZvcm1TdWJtaXQgZnJvbSAnLi9mb3JtX3N1Ym1pdC5qcydcbmltcG9ydCBmb3JtVXBsb2FkUHJvZ3Jlc3MgZnJvbSAnLi9mb3JtX3VwbG9hZF9wcm9ncmVzcy5qcydcbmltcG9ydCBtb2RhbENsb3NlIGZyb20gJy4vbW9kYWxfY2xvc2UuanMnXG5pbXBvcnQgY2xpcGJvYXJkIGZyb20gJy4vY2xpcGJvYXJkLmpzJ1xuXG4vLyBjb25maWd1cmUgaHRteFxuaHRteC5jb25maWcuZGVmYXVsdEZvY3VzU2Nyb2xsID0gdHJ1ZVxuaHRteC5vbkxvYWQoZnVuY3Rpb24ocm9vdEVsKSB7XG4gICAgQlNOLmluaXRDYWxsYmFjayhyb290RWwpXG4gICAgYm9vdHN0cmFwUG9wcGVyKHJvb3RFbClcbiAgICB0b2FzdChyb290RWwpXG4gICAgZm9ybVN1Ym1pdChyb290RWwpXG4gICAgZm9ybVVwbG9hZFByb2dyZXNzKHJvb3RFbClcbiAgICBtb2RhbENsb3NlKHJvb3RFbClcbiAgICBjbGlwYm9hcmQocm9vdEVsKVxufSk7XG5cbndpbmRvdy5odG14ID0gaHRteFxuXG5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2h0bXg6Y29uZmlnUmVxdWVzdCcsIChldnQpID0+IHtcbiAgICBldnQuZGV0YWlsLmhlYWRlcnNbJ1gtQ1NSRi1Ub2tlbiddID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZl90b2tlblwiXScpLmNvbnRlbnRcbn0pXG4iXSwibmFtZXMiOlsiQlNOIiwiYm9vdHN0cmFwUG9wcGVyIiwiaHRteCIsInRvYXN0IiwiZm9ybVN1Ym1pdCIsImZvcm1VcGxvYWRQcm9ncmVzcyIsIm1vZGFsQ2xvc2UiLCJjbGlwYm9hcmQiLCJjb25maWciLCJkZWZhdWx0Rm9jdXNTY3JvbGwiLCJvbkxvYWQiLCJyb290RWwiLCJpbml0Q2FsbGJhY2siLCJ3aW5kb3ciLCJkb2N1bWVudCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwiZGV0YWlsIiwiaGVhZGVycyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/app.js\n");

/***/ }),

/***/ "./assets/js/bootstrap_popper.js":
/*!***************************************!*\
  !*** ./assets/js/bootstrap_popper.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\");\n\n\n// Wire in popper.js support. This ensure popups stays within the viewport.\n// See: https://github.com/thednp/bootstrap.native/issues/211\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(rootEl) {\n  rootEl.querySelectorAll(\"div.dropdown > button\").forEach(function (button) {\n    button.addEventListener(\"click\", function (evt) {\n      var menu = button.parentElement.children.item(1);\n      if (menu.classList.contains(\"show\")) {\n        menu.removeAttribute(\"x-placement\");\n        menu.removeAttribute(\"style\");\n        var popper = new popper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](button, menu, {\n          modifiers: {\n            preventOverflow: {\n              enabled: true\n            },\n            flip: {\n              enabled: true\n            },\n            hide: {\n              enabled: false\n            }\n          }\n        });\n      }\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvYm9vdHN0cmFwX3BvcHBlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4Qjs7QUFFOUI7QUFDQTtBQUNBLDZCQUFlLG9DQUFTQyxNQUFNLEVBQUU7RUFDNUJBLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVNDLE1BQU0sRUFBRTtJQUN0RUEsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBU0MsR0FBRyxFQUFFO01BQzNDLElBQUlDLElBQUksR0FBR0gsTUFBTSxDQUFDSSxhQUFhLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztNQUVoRCxJQUFJSCxJQUFJLENBQUNJLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2pDTCxJQUFJLENBQUNNLGVBQWUsQ0FBQyxhQUFhLENBQUM7UUFDbkNOLElBQUksQ0FBQ00sZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUU3QixJQUFJQyxNQUFNLEdBQUcsSUFBSWQsaURBQU0sQ0FBQ0ksTUFBTSxFQUFFRyxJQUFJLEVBQUU7VUFDbENRLFNBQVMsRUFBRTtZQUNQQyxlQUFlLEVBQUU7Y0FBRUMsT0FBTyxFQUFFO1lBQUssQ0FBQztZQUNsQ0MsSUFBSSxFQUFFO2NBQUVELE9BQU8sRUFBRTtZQUFJLENBQUM7WUFDdEJFLElBQUksRUFBRTtjQUFFRixPQUFPLEVBQUU7WUFBSztVQUMxQjtRQUNKLENBQUMsQ0FBQztNQUNOO0lBQ0osQ0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvYm9vdHN0cmFwX3BvcHBlci5qcz81ODUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuXG4vLyBXaXJlIGluIHBvcHBlci5qcyBzdXBwb3J0LiBUaGlzIGVuc3VyZSBwb3B1cHMgc3RheXMgd2l0aGluIHRoZSB2aWV3cG9ydC5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RoZWRucC9ib290c3RyYXAubmF0aXZlL2lzc3Vlcy8yMTFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJvb3RFbCkge1xuICAgIHJvb3RFbC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2LmRyb3Bkb3duID4gYnV0dG9uXCIpLmZvckVhY2goZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBsZXQgbWVudSA9IGJ1dHRvbi5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLml0ZW0oMSk7XG5cbiAgICAgICAgICAgIGlmIChtZW51LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpIHtcbiAgICAgICAgICAgICAgICBtZW51LnJlbW92ZUF0dHJpYnV0ZShcIngtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG5cbiAgICAgICAgICAgICAgICBsZXQgcG9wcGVyID0gbmV3IFBvcHBlcihidXR0b24sIG1lbnUsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxpcDogeyBlbmFibGVkOiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGU6IHsgZW5hYmxlZDogZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbn0iXSwibmFtZXMiOlsiUG9wcGVyIiwicm9vdEVsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwibWVudSIsInBhcmVudEVsZW1lbnQiLCJjaGlsZHJlbiIsIml0ZW0iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZUF0dHJpYnV0ZSIsInBvcHBlciIsIm1vZGlmaWVycyIsInByZXZlbnRPdmVyZmxvdyIsImVuYWJsZWQiLCJmbGlwIiwiaGlkZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/bootstrap_popper.js\n");

/***/ }),

/***/ "./assets/js/clipboard.js":
/*!********************************!*\
  !*** ./assets/js/clipboard.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var restoreTimeout = 1500;\n  var evtHandler = function evtHandler(evt) {\n    var value = this.dataset.value;\n    var btn = this;\n    navigator.clipboard.writeText(value).then(function () {\n      btn.classList.remove(\"btn-outline-secondary\");\n      btn.classList.add(\"btn-outline-success\");\n      var icon = btn.querySelector(\"i\");\n      icon.classList.remove(\"if-copy\", \"text-primary\");\n      icon.classList.add(\"if-check\", \"text-success\");\n      var span = btn.querySelector(\"span\");\n      if (span) {\n        span.classList.remove(\"text-primary\");\n        span.classList.add(\"text-success\");\n        span.setAttribute(\"aria-live\", \"polite\");\n        span.innerText = \"Link copied\";\n      }\n      setTimeout(function () {\n        icon.classList.remove(\"if-check\", \"text-success\");\n        icon.classList.add(\"if-copy\", \"text-primary\");\n        if (span) {\n          span.classList.remove(\"text-success\");\n          span.classList.add(\"text-primary\");\n          span.innerText = \"Copy link\";\n        }\n        btn.classList.remove(\"btn-outline-success\");\n        btn.classList.add(\"btn-outline-secondary\");\n      }, restoreTimeout);\n    });\n  };\n  document.querySelectorAll(\".btn-copy-to-clipboard\").forEach(function (btn) {\n    btn.addEventListener(\"click\", evtHandler);\n  });\n  document.querySelectorAll(\".input-select-text\").forEach(function (el) {\n    el.addEventListener(\"click\", function (evt) {\n      this.select();\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvY2xpcGJvYXJkLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBWTtFQUV6QixJQUFNQSxjQUFjLEdBQUcsSUFBSTtFQUUzQixJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBVSxDQUFZQyxHQUFHLEVBQUM7SUFDNUIsSUFBSUMsS0FBSyxHQUFHLElBQUksQ0FBQ0MsT0FBTyxDQUFDRCxLQUFLO0lBQzlCLElBQUlFLEdBQUcsR0FBRyxJQUFJO0lBRWRDLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLENBQUNMLEtBQUssQ0FBQyxDQUFDTSxJQUFJLENBQUMsWUFBVztNQUNuREosR0FBRyxDQUFDSyxTQUFTLENBQUNDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQztNQUM3Q04sR0FBRyxDQUFDSyxTQUFTLENBQUNFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztNQUV4QyxJQUFJQyxJQUFJLEdBQUdSLEdBQUcsQ0FBQ1MsYUFBYSxDQUFDLEdBQUcsQ0FBQztNQUNqQ0QsSUFBSSxDQUFDSCxTQUFTLENBQUNDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDO01BQ2hERSxJQUFJLENBQUNILFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUM7TUFFOUMsSUFBSUcsSUFBSSxHQUFHVixHQUFHLENBQUNTLGFBQWEsQ0FBQyxNQUFNLENBQUM7TUFDcEMsSUFBSUMsSUFBSSxFQUFFO1FBQ1JBLElBQUksQ0FBQ0wsU0FBUyxDQUFDQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQ3JDSSxJQUFJLENBQUNMLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUNsQ0csSUFBSSxDQUFDQyxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztRQUN4Q0QsSUFBSSxDQUFDRSxTQUFTLEdBQUMsYUFBYTtNQUM5QjtNQUVBQyxVQUFVLENBQUMsWUFBVTtRQUNuQkwsSUFBSSxDQUFDSCxTQUFTLENBQUNDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDO1FBQ2pERSxJQUFJLENBQUNILFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUM7UUFFN0MsSUFBSUcsSUFBSSxFQUFFO1VBQ1JBLElBQUksQ0FBQ0wsU0FBUyxDQUFDQyxNQUFNLENBQUMsY0FBYyxDQUFDO1VBQ3JDSSxJQUFJLENBQUNMLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLGNBQWMsQ0FBQztVQUNsQ0csSUFBSSxDQUFDRSxTQUFTLEdBQUMsV0FBVztRQUM1QjtRQUVBWixHQUFHLENBQUNLLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLHFCQUFxQixDQUFDO1FBQzNDTixHQUFHLENBQUNLLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLHVCQUF1QixDQUFDO01BQzVDLENBQUMsRUFBRVosY0FBYyxDQUFDO0lBQ3BCLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFRG1CLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVNoQixHQUFHLEVBQUM7SUFDdkVBLEdBQUcsQ0FBQ2lCLGdCQUFnQixDQUFDLE9BQU8sRUFBRXJCLFVBQVUsQ0FBQztFQUMzQyxDQUFDLENBQUM7RUFFRmtCLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVNFLEVBQUUsRUFBQztJQUNsRUEsRUFBRSxDQUFDRCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBU3BCLEdBQUcsRUFBRTtNQUN6QyxJQUFJLENBQUNzQixNQUFNLEVBQUU7SUFDZixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Fzc2V0cy9qcy9jbGlwYm9hcmQuanM/OTk3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cbiAgY29uc3QgcmVzdG9yZVRpbWVvdXQgPSAxNTAwXG5cbiAgbGV0IGV2dEhhbmRsZXIgPSBmdW5jdGlvbihldnQpe1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuZGF0YXNldC52YWx1ZVxuICAgIGxldCBidG4gPSB0aGlzXG5cbiAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh2YWx1ZSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIpXG4gICAgICBidG4uY2xhc3NMaXN0LmFkZChcImJ0bi1vdXRsaW5lLXN1Y2Nlc3NcIilcblxuICAgICAgbGV0IGljb24gPSBidG4ucXVlcnlTZWxlY3RvcihcImlcIilcbiAgICAgIGljb24uY2xhc3NMaXN0LnJlbW92ZShcImlmLWNvcHlcIiwgXCJ0ZXh0LXByaW1hcnlcIilcbiAgICAgIGljb24uY2xhc3NMaXN0LmFkZChcImlmLWNoZWNrXCIsIFwidGV4dC1zdWNjZXNzXCIpXG5cbiAgICAgIGxldCBzcGFuID0gYnRuLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuXCIpXG4gICAgICBpZiAoc3Bhbikge1xuICAgICAgICBzcGFuLmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0LXByaW1hcnlcIilcbiAgICAgICAgc3Bhbi5jbGFzc0xpc3QuYWRkKFwidGV4dC1zdWNjZXNzXCIpXG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsIFwicG9saXRlXCIpXG4gICAgICAgIHNwYW4uaW5uZXJUZXh0PVwiTGluayBjb3BpZWRcIlxuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGljb24uY2xhc3NMaXN0LnJlbW92ZShcImlmLWNoZWNrXCIsIFwidGV4dC1zdWNjZXNzXCIpXG4gICAgICAgIGljb24uY2xhc3NMaXN0LmFkZChcImlmLWNvcHlcIiwgXCJ0ZXh0LXByaW1hcnlcIilcblxuICAgICAgICBpZiAoc3Bhbikge1xuICAgICAgICAgIHNwYW4uY2xhc3NMaXN0LnJlbW92ZShcInRleHQtc3VjY2Vzc1wiKVxuICAgICAgICAgIHNwYW4uY2xhc3NMaXN0LmFkZChcInRleHQtcHJpbWFyeVwiKVxuICAgICAgICAgIHNwYW4uaW5uZXJUZXh0PVwiQ29weSBsaW5rXCJcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgYnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJidG4tb3V0bGluZS1zdWNjZXNzXCIpXG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKFwiYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIpXG4gICAgICB9LCByZXN0b3JlVGltZW91dClcbiAgICB9KVxuICB9XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5idG4tY29weS10by1jbGlwYm9hcmRcIikuZm9yRWFjaChmdW5jdGlvbihidG4pe1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZ0SGFuZGxlcilcbiAgfSlcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmlucHV0LXNlbGVjdC10ZXh0XCIpLmZvckVhY2goZnVuY3Rpb24oZWwpe1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgIHRoaXMuc2VsZWN0KClcbiAgICB9KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlc3RvcmVUaW1lb3V0IiwiZXZ0SGFuZGxlciIsImV2dCIsInZhbHVlIiwiZGF0YXNldCIsImJ0biIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInRoZW4iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJpY29uIiwicXVlcnlTZWxlY3RvciIsInNwYW4iLCJzZXRBdHRyaWJ1dGUiLCJpbm5lclRleHQiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbCIsInNlbGVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/clipboard.js\n");

/***/ }),

/***/ "./assets/js/form_submit.js":
/*!**********************************!*\
  !*** ./assets/js/form_submit.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(rootEl) {\n  rootEl.querySelectorAll(\"[data-submit-target]\").forEach(function (btn) {\n    btn.addEventListener(\"click\", function () {\n      var form = document.querySelector(btn.dataset.submitTarget);\n      form.submit();\n    });\n  });\n  rootEl.querySelectorAll(\"form.change-submit\").forEach(function (form) {\n    form.addEventListener(\"change\", function () {\n      var btn = form.querySelector(\"button[type='submit']\");\n      if (btn !== null) {\n        btn.disabled = true;\n        var loadingText = btn.dataset.loading || \"Loading...\";\n        btn.innerHTML = '<span class=\"spinner-border\" role=\"status\" aria-hidden=\"true\"></span> ' + loadingText;\n      }\n      form.submit();\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvZm9ybV9zdWJtaXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUFlLG9DQUFTQSxNQUFNLEVBQUU7RUFDNUJBLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQUNDLEdBQUcsRUFBSztJQUM3REEsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBTTtNQUNoQyxJQUFJQyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDSixHQUFHLENBQUNLLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDO01BQzNESixJQUFJLENBQUNLLE1BQU0sRUFBRTtJQUNqQixDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7RUFFRlYsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDQyxPQUFPLENBQUMsVUFBQ0csSUFBSSxFQUFLO0lBQzVEQSxJQUFJLENBQUNELGdCQUFnQixDQUFDLFFBQVEsRUFBRSxZQUFNO01BQ2xDLElBQUlELEdBQUcsR0FBR0UsSUFBSSxDQUFDRSxhQUFhLENBQUMsdUJBQXVCLENBQUM7TUFDckQsSUFBSUosR0FBRyxLQUFLLElBQUksRUFBRTtRQUNkQSxHQUFHLENBQUNRLFFBQVEsR0FBRyxJQUFJO1FBQ25CLElBQUlDLFdBQVcsR0FBR1QsR0FBRyxDQUFDSyxPQUFPLENBQUNLLE9BQU8sSUFBSSxZQUFZO1FBQ3JEVixHQUFHLENBQUNXLFNBQVMsR0FBRyx3RUFBd0UsR0FDcEZGLFdBQVc7TUFDbkI7TUFDQVAsSUFBSSxDQUFDSyxNQUFNLEVBQUU7SUFDakIsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvZm9ybV9zdWJtaXQuanM/NTBmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb290RWwpIHtcbiAgICByb290RWwucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXN1Ym1pdC10YXJnZXRdXCIpLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihidG4uZGF0YXNldC5zdWJtaXRUYXJnZXQpXG4gICAgICAgICAgICBmb3JtLnN1Ym1pdCgpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcm9vdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JtLmNoYW5nZS1zdWJtaXRcIikuZm9yRWFjaCgoZm9ybSkgPT4ge1xuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJ0biA9IGZvcm0ucXVlcnlTZWxlY3RvcihcImJ1dHRvblt0eXBlPSdzdWJtaXQnXVwiKVxuICAgICAgICAgICAgaWYgKGJ0biAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJ0bi5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICBsZXQgbG9hZGluZ1RleHQgPSBidG4uZGF0YXNldC5sb2FkaW5nIHx8IFwiTG9hZGluZy4uLlwiXG4gICAgICAgICAgICAgICAgYnRuLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cInNwaW5uZXItYm9yZGVyXCIgcm9sZT1cInN0YXR1c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4gJyArIFxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybS5zdWJtaXQoKVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0iXSwibmFtZXMiOlsicm9vdEVsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJidG4iLCJhZGRFdmVudExpc3RlbmVyIiwiZm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJzdWJtaXRUYXJnZXQiLCJzdWJtaXQiLCJkaXNhYmxlZCIsImxvYWRpbmdUZXh0IiwibG9hZGluZyIsImlubmVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/form_submit.js\n");

/***/ }),

/***/ "./assets/js/form_upload_progress.js":
/*!*******************************************!*\
  !*** ./assets/js/form_upload_progress.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(rootEl) {\n  rootEl.querySelectorAll('form input[data-upload-progress-target]').forEach(function (input) {\n    input.addEventListener('change', function () {\n      var files = Array.from(input.files);\n      if (!files.length) return;\n      var target = document.getElementById(input.dataset.uploadProgressTarget);\n      var form = input.closest('form');\n      var csrfToken = document.querySelector('meta[name=csrf_token]').content;\n      files.forEach(function (file, i) {\n        var tmpl = document.getElementById('tmpl-upload-progress').content.firstElementChild.cloneNode(true);\n        tmpl.querySelector('.upload-name').innerText = file.name;\n        target.appendChild(tmpl);\n        var hideBtnCancelUpload = function hideBtnCancelUpload() {\n          var b = tmpl.querySelector('.btn-cancel-upload');\n          if (b == null) return;\n          b.parentElement.removeChild(b);\n        };\n        var showBtnRemoveUpload = function showBtnRemoveUpload() {\n          var b = tmpl.querySelector('.btn-remove-upload');\n          if (b == null) return;\n          b.classList.remove('d-none');\n        };\n        tmpl.querySelector('.btn-remove-upload').addEventListener('click', function () {\n          var i = this.closest('.list-group-item');\n          i.parentElement.removeChild(i);\n        });\n        var showMessage = function showMessage(msg, level) {\n          var m = tmpl.querySelector('.upload-msg');\n          var cl = 'text-muted';\n          if (level == 'info') {\n            cl = 'text-muted';\n          } else if (level = 'error') {\n            cl = 'text-danger';\n          }\n          m.classList.remove('text-muted');\n          m.classList.add(cl);\n          m.innerText = msg;\n        };\n        var hlPgBar = function hlPgBar(pgBar, level) {\n          var cl = 'bg-info';\n          if (level == 'warning') {\n            cl = 'bg-warning';\n          } else if (level == 'error') {\n            cl = 'bg-danger';\n          }\n          pgBar.classList.remove('bg-info');\n          pgBar.classList.add(cl);\n        };\n\n        // prevent file upload when above max file size\n        var maxFileSize = input.dataset.uploadMaxFileSize;\n        if (!isNaN(maxFileSize) && file.size > maxFileSize) {\n          hideBtnCancelUpload();\n          showBtnRemoveUpload();\n          showMessage(input.dataset.uploadMsgFileTooLarge, 'error');\n          hlPgBar(tmpl.querySelector('.progress-bar'), 'error');\n          return;\n        }\n\n        // send headers along with request\n        var headers = [['X-CSRF-Token', csrfToken],\n        // weird, but makes sure that middleware does not try to read _method from form\n        ['X-HTTP-Method-Override', 'POST'],\n        //\"Failed to execute 'setRequestHeader' on 'XMLHttpRequest': String contains non ISO-8859-1 code point\"\n        ['X-Upload-Filename', encodeURIComponent(file.name)],\n        //refused by browser\n        //['Content-Length', file.size],\n        ['Content-Type', file.type]];\n        var req = new XMLHttpRequest();\n        req.addEventListener('abort', function (e) {\n          showMessage(input.dataset.uploadMsgFileAborted, 'error');\n          hlPgBar(tmpl.querySelector('.progress-bar'), 'error');\n          hideBtnCancelUpload();\n          showBtnRemoveUpload();\n        }, false);\n        req.upload.addEventListener('progress', function (e) {\n          if (!e.lengthComputable) return;\n          var percent = Math.floor(e.loaded / e.total * 100);\n          tmpl.querySelector('.upload-size').innerText = friendlyBytes(e.loaded);\n          tmpl.querySelector('.upload-percent').innerText = percent;\n          var pb = tmpl.querySelector('.progress-bar');\n          pb.style['width'] = \"\".concat(percent, \"%\");\n          pb.setAttribute('aria-valuenow', percent);\n          if (e.loaded == e.total) {\n            hideBtnCancelUpload();\n            showMessage(input.dataset.uploadMsgFileProcessing, 'info');\n          } else {\n            showMessage(input.dataset.uploadMsgFileUploading, 'info');\n          }\n        }, false);\n        req.addEventListener('readystatechange', function (evt) {\n          if (req.readyState !== 4) return;\n          hideBtnCancelUpload();\n\n          // file created\n          if (req.status == 200 || req.status == 201) {\n            tmpl.parentElement.removeChild(tmpl);\n            var filesBody = document.getElementById('files');\n            filesBody.innerHTML = req.response;\n            // trigger htmx on newly added elements\n            htmx.process(filesBody);\n            htmx.trigger(filesBody, 'htmx:load');\n          }\n\n          /*\n           * file too large. Unfortunately this cannot be detected\n           * anymore at server as the error is wrapped inside others.\n           */else if (req.status == 413) {\n            showBtnRemoveUpload();\n            showMessage(input.dataset.uploadMsgFileTooLarge, 'error');\n            hlPgBar(tmpl.querySelector('.progress-bar'), 'error');\n          }\n          // directory has been removed in the meantime\n          else if (req.status == 404) {\n            showBtnRemoveUpload();\n            showMessage(input.dataset.uploadMsgDirNotFound, 'error');\n            hlPgBar(tmpl.querySelector('.progress-bar'), 'error');\n          }\n          // undetermined errors\n          else {\n            showBtnRemoveUpload();\n            showMessage(input.dataset.uploadMsgUnexpected, 'error');\n            hlPgBar(tmpl.querySelector('.progress-bar'), 'error');\n          }\n        });\n        req.open(form.method, form.action);\n        for (var _i = 0; _i < headers.length; _i++) {\n          req.setRequestHeader(headers[_i][0], headers[_i][1]);\n        }\n        tmpl.querySelector('.btn-cancel-upload').addEventListener('click', function (evt) {\n          evt.preventDefault();\n          req.abort();\n        });\n        req.send(file);\n      });\n\n      // important to retrigger \"change\" when someone enters the same file again\n      input.value = \"\";\n    });\n  });\n}\nvar byteUnits = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'];\nfunction friendlyBytes(n) {\n  if (n < 10) {\n    return n + ' B';\n  }\n  var e = Math.floor(Math.log(n) / Math.log(1000));\n  var unit = byteUnits[e];\n  var val = Math.floor(n / Math.pow(1000, e) * 10 + 0.5) / 10;\n  if (val < 10 && !Number.isInteger(val)) {\n    return val.toFixed(1) + ' ' + unit;\n  }\n  return val.toFixed(0) + ' ' + unit;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/form_upload_progress.js\n");

/***/ }),

/***/ "./assets/js/modal_close.js":
/*!**********************************!*\
  !*** ./assets/js/modal_close.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(rootEl) {\n  rootEl.querySelectorAll(\".modal-close\").forEach(function (btn) {\n    btn.addEventListener(\"click\", function (evt) {\n      document.getElementById(\"modals\").innerHTML = \"\";\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvbW9kYWxfY2xvc2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUFlLG9DQUFTQSxNQUFNLEVBQUU7RUFDNUJBLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7SUFDM0RBLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQUFDLEdBQUcsRUFBSTtNQUNqQ0MsUUFBUSxDQUFDQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUNDLFNBQVMsR0FBRyxFQUFFO0lBQ3BELENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21vZGFsX2Nsb3NlLmpzPzQxNDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocm9vdEVsKSB7XG4gICAgcm9vdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWwtY2xvc2VcIikuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZ0ID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWxzXCIpLmlubmVySFRNTCA9IFwiXCJcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsicm9vdEVsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJidG4iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/modal_close.js\n");

/***/ }),

/***/ "./assets/js/toast.js":
/*!****************************!*\
  !*** ./assets/js/toast.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(rootEl) {\n  rootEl.querySelectorAll('[data-dismiss=\"toast\"]').forEach(function (el) {\n    el.Toast.show();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvdG9hc3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUFlLG9DQUFVQSxNQUFNLEVBQUU7RUFDN0JBLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFVBQUNDLEVBQUUsRUFBSztJQUM5REEsRUFBRSxDQUFDQyxLQUFLLENBQUNDLElBQUksRUFBRTtFQUNuQixDQUFDLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Fzc2V0cy9qcy90b2FzdC5qcz9iNTE2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb290RWwpIHtcbiAgICByb290RWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZGlzbWlzcz1cInRvYXN0XCJdJykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgZWwuVG9hc3Quc2hvdygpXG4gICAgfSlcbn0iXSwibmFtZXMiOlsicm9vdEVsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbCIsIlRvYXN0Iiwic2hvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/toast.js\n");

/***/ }),

/***/ "./node_modules/bootstrap.native/dist/bootstrap-native-v4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bootstrap.native/dist/bootstrap-native-v4.js ***!
  \*******************************************************************/
/***/ (function(module) {

eval("/*!\n  * Native JavaScript for Bootstrap v4.1.0 (https://thednp.github.io/bootstrap.native/)\n  * Copyright 2015-2022 © dnp_theme\n  * Licensed under MIT (https://github.com/thednp/bootstrap.native/blob/master/LICENSE)\n  */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  /**\n   * A global namespace for `document.head`.\n   */\n  var documentHead = document.head;\n\n  /**\n   * A global `boolean` for CSS3 transition support.\n   * @type {boolean}\n   */\n  var supportTransition = 'webkitTransition' in documentHead.style || 'transition' in documentHead.style;\n\n  /**\n   * A global namespace for 'transitionend' string.\n   * @type {string}\n   */\n  var transitionEndEvent = 'webkitTransition' in documentHead.style ? 'webkitTransitionEnd' : 'transitionend';\n\n  /**\n   * A global namespace for 'transitionDelay' string.\n   * @type {string}\n   */\n  var transitionDelay = 'webkitTransition' in documentHead.style ? 'webkitTransitionDelay' : 'transitionDelay';\n\n  /**\n   * A global namespace for:\n   * * `transitionProperty` string for modern brosers,\n   * * `webkitTransition` for legacy Chrome / Safari browsers\n   *\n   * @type {string}\n   */\n  var transitionProperty = 'webkitTransition' in documentHead.style ? 'webkitTransitionProperty' : 'transitionProperty';\n\n  /**\n   * Shortcut for `window.getComputedStyle(element).propertyName`\n   * static method.\n   *\n   * * If `element` parameter is not an `HTMLElement`, `getComputedStyle`\n   * throws a `ReferenceError`.\n   *\n   * @param {HTMLElement | Element} element target\n   * @param {string} property the css property\n   * @return {string} the css property value\n   */\n  function getElementStyle(element, property) {\n    var computedStyle = getComputedStyle(element);\n\n    // @ts-ignore -- must use camelcase strings,\n    // or non-camelcase strings with `getPropertyValue`\n    return property in computedStyle ? computedStyle[property] : '';\n  }\n\n  /**\n   * Utility to get the computed `transitionDelay`\n   * from Element in miliseconds.\n   *\n   * @param {HTMLElement | Element} element target\n   * @return {number} the value in miliseconds\n   */\n  function getElementTransitionDelay(element) {\n    var propertyValue = getElementStyle(element, transitionProperty);\n    var delayValue = getElementStyle(element, transitionDelay);\n    var delayScale = delayValue.includes('ms') ? 1 : 1000;\n    var duration = supportTransition && propertyValue && propertyValue !== 'none'\n      ? parseFloat(delayValue) * delayScale : 0;\n\n    return !Number.isNaN(duration) ? duration : 0;\n  }\n\n  /**\n   * A global namespace for 'transitionDuration' string.\n   * @type {string}\n   */\n  var transitionDuration = 'webkitTransition' in documentHead.style ? 'webkitTransitionDuration' : 'transitionDuration';\n\n  /**\n   * Utility to get the computed `transitionDuration`\n   * from Element in miliseconds.\n   *\n   * @param {HTMLElement | Element} element target\n   * @return {number} the value in miliseconds\n   */\n  function getElementTransitionDuration(element) {\n    var propertyValue = getElementStyle(element, transitionProperty);\n    var durationValue = getElementStyle(element, transitionDuration);\n    var durationScale = durationValue.includes('ms') ? 1 : 1000;\n    var duration = supportTransition && propertyValue && propertyValue !== 'none'\n      ? parseFloat(durationValue) * durationScale : 0;\n\n    return !Number.isNaN(duration) ? duration : 0;\n  }\n\n  /**\n   * Utility to make sure callbacks are consistently\n   * called when transition ends.\n   *\n   * @param {HTMLElement | Element} element target\n   * @param {EventListener} handler `transitionend` callback\n   */\n  function emulateTransitionEnd(element, handler) {\n    var called = 0;\n    var endEvent = new Event(transitionEndEvent);\n    var duration = getElementTransitionDuration(element);\n    var delay = getElementTransitionDelay(element);\n\n    if (supportTransition && duration) {\n      /**\n       * Wrap the handler in on -> off callback\n       * @param {Event} e Event object\n       */\n      var transitionEndWrapper = function (e) {\n        if (e.target === element) {\n          handler.apply(element, [e]);\n          element.removeEventListener(transitionEndEvent, transitionEndWrapper);\n          called = 1;\n        }\n      };\n      element.addEventListener(transitionEndEvent, transitionEndWrapper);\n      setTimeout(function () {\n        if (!called) { element.dispatchEvent(endEvent); }\n      }, duration + delay + 17);\n    } else {\n      handler.apply(element, [endEvent]);\n    }\n  }\n\n  /**\n   * Returns the `document` or the `#document` element.\n   * @see https://github.com/floating-ui/floating-ui\n   * @param {(Node | HTMLElement | Element | globalThis)=} node\n   * @returns {Document}\n   */\n  function getDocument(node) {\n    if (node instanceof HTMLElement) { return node.ownerDocument; }\n    if (node instanceof Window) { return node.document; }\n    return window.document;\n  }\n\n  /**\n   * A global array of possible `ParentNode`.\n   */\n  var parentNodes = [Document, Element, HTMLElement];\n\n  /**\n   * A global array with `Element` | `HTMLElement`.\n   */\n  var elementNodes = [Element, HTMLElement];\n\n  /**\n   * Utility to check if target is typeof `HTMLElement`, `Element`, `Node`\n   * or find one that matches a selector.\n   *\n   * @param {HTMLElement | Element | string} selector the input selector or target element\n   * @param {(HTMLElement | Element | Document)=} parent optional node to look into\n   * @return {(HTMLElement | Element)?} the `HTMLElement` or `querySelector` result\n   */\n  function querySelector(selector, parent) {\n    var lookUp = parentNodes.some(function (x) { return parent instanceof x; })\n      ? parent : getDocument();\n\n    // @ts-ignore\n    return elementNodes.some(function (x) { return selector instanceof x; })\n      // @ts-ignore\n      ? selector : lookUp.querySelector(selector);\n  }\n\n  /** BSN v4 custom event */\n  function bootstrapCustomEvent(eventType, componentName, eventProperties) {\n    var OriginalCustomEvent = new CustomEvent((eventType + \".bs.\" + componentName), { cancelable: true });\n\n    if (typeof eventProperties !== 'undefined') {\n      Object.keys(eventProperties).forEach(function (key) {\n        Object.defineProperty(OriginalCustomEvent, key, {\n          value: eventProperties[key],\n        });\n      });\n    }\n    return OriginalCustomEvent;\n  }\n\n  /**\n   * A quick shortcut for `dispatchEvent` v4.\n   * @param {CustomEvent} customEvent the event object\n   */\n  function dispatchCustomEvent(customEvent) {\n    if (this) { this.dispatchEvent(customEvent); }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Alert\n  -------------------------------------------- */\n\n  // ALERT DEFINITION\n  // ================\n\n  function Alert(elem) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // the target alert\n    var alert;\n\n    // custom events\n    var closeCustomEvent = bootstrapCustomEvent('close', 'alert');\n    var closedCustomEvent = bootstrapCustomEvent('closed', 'alert');\n\n    // private methods\n    function triggerHandler() {\n      if (alert.classList.contains('fade')) { emulateTransitionEnd(alert, transitionEndHandler); }\n      else { transitionEndHandler(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', clickHandler, false);\n    }\n\n    // event handlers\n    function clickHandler(e) {\n      alert = e && e.target.closest('.alert');\n      element = querySelector('[data-dismiss=\"alert\"]', alert);\n      if (element && alert && (element === e.target || element.contains(e.target))) { self.close(); }\n    }\n    function transitionEndHandler() {\n      toggleEvents();\n      alert.parentNode.removeChild(alert);\n      dispatchCustomEvent.call(alert, closedCustomEvent);\n    }\n\n    // PUBLIC METHODS\n    self.close = function () {\n      if (alert && element && alert.classList.contains('show')) {\n        dispatchCustomEvent.call(alert, closeCustomEvent);\n        if (closeCustomEvent.defaultPrevented) { return; }\n        self.dispose();\n        alert.classList.remove('show');\n        triggerHandler();\n      }\n    };\n\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Alert;\n    };\n\n    // INIT\n    // initialization element\n    element = querySelector(elem);\n\n    // find the target alert\n    alert = element.closest('.alert');\n\n    // reset on re-init\n    if (element.Alert) { element.Alert.dispose(); }\n\n    // prevent adding event handlers twice\n    if (!element.Alert) { toggleEvents(1); }\n\n    // store init object within target element\n    self.element = element;\n    element.Alert = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Button\n  ---------------------------------------------*/\n\n  // BUTTON DEFINITION\n  // =================\n\n  function Button(elem) {\n    var element;\n\n    // bind and labels\n    var self = this;\n    var labels;\n\n    // changeEvent\n    var changeCustomEvent = bootstrapCustomEvent('change', 'button');\n\n    // private methods\n    function toggle(e) {\n      var eTarget = e.target;\n      var parentLabel = eTarget.closest('LABEL'); // the .btn label\n      var label = null;\n\n      if (eTarget.tagName === 'LABEL') {\n        label = eTarget;\n      } else if (parentLabel) {\n        label = parentLabel;\n      }\n\n      // current input\n      var input = label && label.getElementsByTagName('INPUT')[0];\n\n      // invalidate if no input\n      if (!input) { return; }\n\n      dispatchCustomEvent.call(input, changeCustomEvent); // trigger the change for the input\n      dispatchCustomEvent.call(element, changeCustomEvent); // trigger the change for the btn-group\n\n      // manage the dom manipulation\n      if (input.type === 'checkbox') { // checkboxes\n        if (changeCustomEvent.defaultPrevented) { return; } // discontinue when defaultPrevented is true\n\n        if (!input.checked) {\n          label.classList.add('active');\n          input.getAttribute('checked');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n        } else {\n          label.classList.remove('active');\n          input.getAttribute('checked');\n          input.removeAttribute('checked');\n          input.checked = false;\n        }\n\n        if (!element.toggled) { // prevent triggering the event twice\n          element.toggled = true;\n        }\n      }\n\n      if (input.type === 'radio' && !element.toggled) { // radio buttons\n        if (changeCustomEvent.defaultPrevented) { return; }\n        // don't trigger if already active\n        // (the OR condition is a hack to check if the buttons were selected\n        // with key press and NOT mouse click)\n        if (!input.checked || (e.screenX === 0 && e.screenY === 0)) {\n          label.classList.add('active');\n          label.classList.add('focus');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n\n          element.toggled = true;\n          Array.from(labels).forEach(function (otherLabel) {\n            var otherInput = otherLabel.getElementsByTagName('INPUT')[0];\n            if (otherLabel !== label && otherLabel.classList.contains('active')) {\n              dispatchCustomEvent.call(otherInput, changeCustomEvent); // trigger the change\n              otherLabel.classList.remove('active');\n              otherInput.removeAttribute('checked');\n              otherInput.checked = false;\n            }\n          });\n        }\n      }\n      setTimeout(function () { element.toggled = false; }, 50);\n    }\n\n    // handlers\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32 && e.target === document.activeElement) { toggle(e); }\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32) { e.preventDefault(); }\n    }\n    function focusToggle(e) {\n      if (e.target.tagName === 'INPUT') {\n        var action = e.type === 'focusin' ? 'add' : 'remove';\n        e.target.closest('.btn').classList[action]('focus');\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', toggle, false);\n      element[action]('keyup', keyHandler, false);\n      element[action]('keydown', preventScroll, false);\n      element[action]('focusin', focusToggle, false);\n      element[action]('focusout', focusToggle, false);\n    }\n\n    // public method\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Button;\n    };\n\n    // init\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Button) { element.Button.dispose(); }\n\n    labels = element.getElementsByClassName('btn');\n\n    // invalidate\n    if (!labels.length) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Button) { toggleEvents(1); }\n\n    // set initial toggled state\n    // toggled makes sure to prevent triggering twice the change.bs.button events\n    element.toggled = false;\n\n    // associate target with init object\n    element.Button = self;\n\n    // activate items on load\n    Array.from(labels).forEach(function (btn) {\n      var hasChecked = querySelector('input:checked', btn);\n      if (!btn.classList.contains('active') && hasChecked) {\n        btn.classList.add('active');\n      }\n      if (btn.classList.contains('active') && !hasChecked) {\n        btn.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * A global namespace for mouse hover events.\n   * @type {[string, string]}\n   */\n  var mouseHoverEvents = ('onmouseleave' in document) ? ['mouseenter', 'mouseleave'] : ['mouseover', 'mouseout'];\n\n  /**\n   * A global namespace for most scroll event listeners.\n   * @type {Partial<AddEventListenerOptions>}\n   */\n  var passiveHandler = { passive: true };\n\n  /**\n   * Returns the bounding client rect of a target `HTMLElement`.\n   *\n   * @see https://github.com/floating-ui/floating-ui\n   *\n   * @param {HTMLElement | Element} element event.target\n   * @param {boolean=} includeScale when *true*, the target scale is also computed\n   * @returns {SHORTER.BoundingClientRect} the bounding client rect object\n   */\n  function getBoundingClientRect(element, includeScale) {\n    var ref = element.getBoundingClientRect();\n    var width = ref.width;\n    var height = ref.height;\n    var top = ref.top;\n    var right = ref.right;\n    var bottom = ref.bottom;\n    var left = ref.left;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    if (includeScale && element instanceof HTMLElement) {\n      var offsetWidth = element.offsetWidth;\n      var offsetHeight = element.offsetHeight;\n      scaleX = offsetWidth > 0 ? Math.round(width) / offsetWidth || 1 : 1;\n      scaleY = offsetHeight > 0 ? Math.round(height) / offsetHeight || 1 : 1;\n    }\n\n    return {\n      width: width / scaleX,\n      height: height / scaleY,\n      top: top / scaleY,\n      right: right / scaleX,\n      bottom: bottom / scaleY,\n      left: left / scaleX,\n      x: left / scaleX,\n      y: top / scaleY,\n    };\n  }\n\n  /**\n   * Returns the `document.documentElement` or the `<html>` element.\n   *\n   * @param {(Node | HTMLElement | Element | globalThis)=} node\n   * @returns {HTMLElement | HTMLHtmlElement}\n   */\n  function getDocumentElement(node) {\n    return getDocument(node).documentElement;\n  }\n\n  /**\n   * Utility to determine if an `HTMLElement`\n   * is partially visible in viewport.\n   *\n   * @param {HTMLElement | Element} element target\n   * @return {boolean} the query result\n   */\n  var isElementInScrollRange = function (element) {\n    var ref = getBoundingClientRect(element);\n    var top = ref.top;\n    var bottom = ref.bottom;\n    var ref$1 = getDocumentElement(element);\n    var clientHeight = ref$1.clientHeight;\n    // checks bottom && top\n    return top <= clientHeight && bottom >= 0;\n  };\n\n  /**\n   * Utility to force re-paint of an `HTMLElement` target.\n   *\n   * @param {HTMLElement | Element} element is the target\n   * @return {number} the `Element.offsetHeight` value\n   */\n  // @ts-ignore\n  var reflow = function (element) { return element.offsetHeight; };\n\n  /* Native JavaScript for Bootstrap 4 | Carousel\n  ----------------------------------------------- */\n\n  // CAROUSEL DEFINITION\n  // ===================\n\n  function Carousel(elem, opsInput) {\n    var assign, assign$1, assign$2;\n\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // internal variables\n    var vars;\n    var ops;\n\n    // custom events\n    var slideCustomEvent;\n    var slidCustomEvent;\n\n    // carousel elements\n    var slides;\n    var leftArrow;\n    var rightArrow;\n    var indicator;\n    var indicators;\n\n    // handlers\n    function pauseHandler() {\n      if (ops.interval !== false && !element.classList.contains('paused')) {\n        element.classList.add('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n        }\n      }\n    }\n    function resumeHandler() {\n      if (ops.interval !== false && element.classList.contains('paused')) {\n        element.classList.remove('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n          self.cycle();\n        }\n      }\n    }\n    function indicatorHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.target; // event target | the current active item\n\n      if (eventTarget && !eventTarget.classList.contains('active') && eventTarget.getAttribute('data-slide-to')) {\n        vars.index = +(eventTarget.getAttribute('data-slide-to'));\n      } else { return; }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function controlsHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.currentTarget || e.srcElement;\n\n      if (eventTarget === rightArrow) {\n        vars.index += 1;\n      } else if (eventTarget === leftArrow) {\n        vars.index -= 1;\n      }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (vars.isSliding) { return; }\n      switch (which) {\n        case 39:\n          vars.index += 1;\n          break;\n        case 37:\n          vars.index -= 1;\n          break;\n        default: return;\n      }\n      self.slideTo(vars.index); // Do the slide\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.pause && ops.interval) {\n        element[action](mouseHoverEvents[0], pauseHandler, false);\n        element[action](mouseHoverEvents[1], resumeHandler, false);\n        element[action]('touchstart', pauseHandler, passiveHandler);\n        element[action]('touchend', resumeHandler, passiveHandler);\n      }\n\n      if (ops.touch && slides.length > 1) { element[action]('touchstart', touchDownHandler, passiveHandler); }\n\n      if (rightArrow) { rightArrow[action]('click', controlsHandler, false); }\n      if (leftArrow) { leftArrow[action]('click', controlsHandler, false); }\n\n      if (indicator) { indicator[action]('click', indicatorHandler, false); }\n      if (ops.keyboard) { window[action]('keydown', keyHandler, false); }\n    }\n    // touch events\n    function toggleTouchEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('touchmove', touchMoveHandler, passiveHandler);\n      element[action]('touchend', touchEndHandler, passiveHandler);\n    }\n    function touchDownHandler(e) {\n      if (vars.isTouch) { return; }\n\n      vars.touchPosition.startX = e.changedTouches[0].pageX;\n\n      if (element.contains(e.target)) {\n        vars.isTouch = true;\n        toggleTouchEvents(1);\n      }\n    }\n    function touchMoveHandler(e) {\n      if (!vars.isTouch) { e.preventDefault(); return; }\n\n      vars.touchPosition.currentX = e.changedTouches[0].pageX;\n\n      // cancel touch if more than one changedTouches detected\n      if (e.type === 'touchmove' && e.changedTouches.length > 1) {\n        e.preventDefault();\n      }\n    }\n    function touchEndHandler(e) {\n      if (!vars.isTouch || vars.isSliding) { return; }\n\n      vars.touchPosition.endX = vars.touchPosition.currentX || e.changedTouches[0].pageX;\n\n      if (vars.isTouch) {\n        if ((!element.contains(e.target) || !element.contains(e.relatedTarget))\n            && Math.abs(vars.touchPosition.startX - vars.touchPosition.endX) < 75) {\n          return;\n        }\n        if (vars.touchPosition.currentX < vars.touchPosition.startX) {\n          vars.index += 1;\n        } else if (vars.touchPosition.currentX > vars.touchPosition.startX) {\n          vars.index -= 1;\n        }\n        vars.isTouch = false;\n        self.slideTo(vars.index);\n\n        toggleTouchEvents(); // remove\n      }\n    }\n    // private methods\n    function setActivePage(pageIndex) { // indicators\n      Array.from(indicators).forEach(function (x) { return x.classList.remove('active'); });\n      if (indicators[pageIndex]) { indicators[pageIndex].classList.add('active'); }\n    }\n    function transitionEndHandler(e) {\n      if (vars.touchPosition) {\n        var next = vars.index;\n        var timeout = e && e.target !== slides[next] ? e.elapsedTime * 1000 + 100 : 20;\n        var activeItem = self.getActiveIndex();\n        var orientation = vars.direction === 'left' ? 'next' : 'prev';\n\n        if (vars.isSliding) {\n          setTimeout(function () {\n            if (vars.touchPosition) {\n              vars.isSliding = false;\n\n              slides[next].classList.add('active');\n              slides[activeItem].classList.remove('active');\n\n              slides[next].classList.remove((\"carousel-item-\" + orientation));\n              slides[next].classList.remove((\"carousel-item-\" + (vars.direction)));\n              slides[activeItem].classList.remove((\"carousel-item-\" + (vars.direction)));\n\n              dispatchCustomEvent.call(element, slidCustomEvent);\n              // check for element, might have been disposed\n              if (!document.hidden && ops.interval && !element.classList.contains('paused')) {\n                self.cycle();\n              }\n            }\n          }, timeout);\n        }\n      }\n    }\n\n    // public methods\n    self.cycle = function () {\n      if (vars.timer) {\n        clearInterval(vars.timer);\n        vars.timer = null;\n      }\n\n      vars.timer = setInterval(function () {\n        var idx = vars.index || self.getActiveIndex();\n        if (isElementInScrollRange(element)) {\n          idx += 1;\n          self.slideTo(idx);\n        }\n      }, ops.interval);\n    };\n    self.slideTo = function (idx) {\n      if (vars.isSliding) { return; } // when controled via methods, make sure to check again\n\n      // the current active, orientation, event eventProperties\n      var activeItem = self.getActiveIndex();\n      var next = idx;\n\n      // first return if we're on the same item #227\n      if (activeItem === next) {\n        return;\n      // or determine slide direction\n      } if ((activeItem < next) || (activeItem === 0 && next === slides.length - 1)) {\n        vars.direction = 'left'; // next\n      } else if ((activeItem > next) || (activeItem === slides.length - 1 && next === 0)) {\n        vars.direction = 'right'; // prev\n      }\n\n      // find the right next index\n      if (next < 0) { next = slides.length - 1; }\n      else if (next >= slides.length) { next = 0; }\n\n      var orientation = vars.direction === 'left' ? 'next' : 'prev'; // determine type\n\n      var eventProperties = {\n        relatedTarget: slides[next], direction: vars.direction, from: activeItem, to: next,\n      };\n      slideCustomEvent = bootstrapCustomEvent('slide', 'carousel', eventProperties);\n      slidCustomEvent = bootstrapCustomEvent('slid', 'carousel', eventProperties);\n      dispatchCustomEvent.call(element, slideCustomEvent); // here we go with the slide\n      if (slideCustomEvent.defaultPrevented) { return; } // discontinue when prevented\n\n      // update index\n      vars.index = next;\n\n      vars.isSliding = true;\n      clearInterval(vars.timer);\n      vars.timer = null;\n      setActivePage(next);\n\n      if (getElementTransitionDuration(slides[next]) && element.classList.contains('slide')) {\n        slides[next].classList.add((\"carousel-item-\" + orientation));\n        reflow(slides[next]);\n        slides[next].classList.add((\"carousel-item-\" + (vars.direction)));\n        slides[activeItem].classList.add((\"carousel-item-\" + (vars.direction)));\n\n        emulateTransitionEnd(slides[next], transitionEndHandler);\n      } else {\n        slides[next].classList.add('active');\n        reflow(slides[next]);\n        slides[activeItem].classList.remove('active');\n        setTimeout(function () {\n          vars.isSliding = false;\n          // check for element, might have been disposed\n          if (ops.interval && element && !element.classList.contains('paused')) {\n            self.cycle();\n          }\n          dispatchCustomEvent.call(element, slidCustomEvent);\n        }, 100);\n      }\n    };\n\n    self.getActiveIndex = function () { return Array.from(slides).indexOf(element.getElementsByClassName('carousel-item active')[0]) || 0; };\n\n    self.dispose = function () {\n      var itemClasses = ['left', 'right', 'prev', 'next'];\n\n      Array.from(slides).forEach(function (slide, idx) {\n        if (slide.classList.contains('active')) { setActivePage(idx); }\n        itemClasses.forEach(function (cls) { return slide.classList.remove((\"carousel-item-\" + cls)); });\n      });\n      clearInterval(vars.timer);\n\n      toggleEvents();\n      vars = {};\n      ops = {};\n      delete element.Carousel;\n    };\n\n    // init\n\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Carousel) { element.Carousel.dispose(); }\n\n    // carousel elements\n    slides = element.getElementsByClassName('carousel-item');\n    (assign = element.getElementsByClassName('carousel-control-prev'), leftArrow = assign[0]);\n    (assign$1 = element.getElementsByClassName('carousel-control-next'), rightArrow = assign$1[0]);\n    (assign$2 = element.getElementsByClassName('carousel-indicators'), indicator = assign$2[0]);\n    indicators = (indicator && indicator.getElementsByTagName('LI')) || [];\n\n    // invalidate when not enough items\n    if (slides.length < 2) { return; }\n\n    // check options\n    // DATA API\n    var intervalAttribute = element.getAttribute('data-interval');\n    var intervalData = intervalAttribute === 'false' ? 0 : +(intervalAttribute);\n    var touchData = element.getAttribute('data-touch') === 'false' ? 0 : 1;\n    var pauseData = element.getAttribute('data-pause') === 'hover' || false;\n    var keyboardData = element.getAttribute('data-keyboard') === 'true' || false;\n\n    // JS options\n    var intervalOption = options.interval;\n    var touchOption = options.touch;\n\n    // set instance options\n    ops = {};\n    ops.keyboard = options.keyboard === true || keyboardData;\n    ops.pause = (options.pause === 'hover' || pauseData) ? 'hover' : false; // false / hover\n    ops.touch = touchOption || touchData;\n\n    ops.interval = 5000; // bootstrap carousel default interval\n\n    if (typeof intervalOption === 'number') { ops.interval = intervalOption; }\n    else if (intervalOption === false || intervalData === 0 || intervalData === false) {\n      ops.interval = 0;\n    } else if (!Number.isNaN(intervalData)) { ops.interval = intervalData; }\n\n    // set first slide active if none\n    if (self.getActiveIndex() < 0) {\n      if (slides.length) { slides[0].classList.add('active'); }\n      if (indicators.length) { setActivePage(0); }\n    }\n\n    // set initial state\n    vars = {};\n    vars.direction = 'left';\n    vars.index = 0;\n    vars.timer = null;\n    vars.isSliding = false;\n    vars.isTouch = false;\n    vars.touchPosition = {\n      startX: 0,\n      currentX: 0,\n      endX: 0,\n    };\n\n    // attach event handlers\n    toggleEvents(1);\n\n    // start to cycle if interval is set\n    if (ops.interval) { self.cycle(); }\n\n    // associate init object to target\n    element.Carousel = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Collapse\n  ----------------------------------------------- */\n\n  // COLLAPSE DEFINITION\n  // ===================\n\n  function Collapse(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // target practice\n    var accordion = null;\n    var collapse = null;\n    var activeCollapse;\n    var activeElement;\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // private methods\n    function openAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.classList.add('collapsing');\n      collapseElement.classList.remove('collapse');\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\";\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'true');\n        toggle.setAttribute('aria-expanded', 'true');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.classList.add('show');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, shownCustomEvent);\n      });\n    }\n    function closeAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\"; // set height first\n      collapseElement.classList.remove('collapse');\n      collapseElement.classList.remove('show');\n      collapseElement.classList.add('collapsing');\n      reflow(collapseElement); // force reflow to enable transition\n      collapseElement.style.height = '0px';\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'false');\n        toggle.setAttribute('aria-expanded', 'false');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, hiddenCustomEvent);\n      });\n    }\n\n    // public methods\n    self.toggle = function (e) {\n      if ((e && e.target.tagName === 'A') || element.tagName === 'A') { e.preventDefault(); }\n      if (element.contains(e.target) || e.target === element) {\n        if (!collapse.classList.contains('show')) { self.show(); }\n        else { self.hide(); }\n      }\n    };\n    self.hide = function () {\n      if (collapse.isAnimating) { return; }\n      closeAction(collapse, element);\n      element.classList.add('collapsed');\n    };\n    self.show = function () {\n      var assign;\n\n      if (accordion) {\n        (assign = accordion.getElementsByClassName('collapse show'), activeCollapse = assign[0]);\n        activeElement = activeCollapse && (querySelector((\"[data-target=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion)\n                      || querySelector((\"[href=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion));\n      }\n\n      if (!collapse.isAnimating) {\n        if (activeElement && activeCollapse !== collapse) {\n          closeAction(activeCollapse, activeElement);\n          activeElement.classList.add('collapsed');\n        }\n        openAction(collapse, element);\n        element.classList.remove('collapsed');\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', self.toggle, false);\n      delete element.Collapse;\n    };\n\n    // init\n\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Collapse) { element.Collapse.dispose(); }\n\n    // DATA API\n    var accordionData = element.getAttribute('data-parent');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'collapse');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'collapse');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'collapse');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'collapse');\n\n    // determine targets\n    collapse = querySelector(options.target || element.getAttribute('data-target') || element.getAttribute('href'));\n\n    if (collapse !== null) { collapse.isAnimating = false; }\n    var accordionSelector = options.parent || accordionData;\n    if (accordionSelector) {\n      accordion = element.closest(accordionSelector);\n    } else {\n      accordion = null;\n    }\n\n    // prevent adding event handlers twice\n    if (!element.Collapse) {\n      element.addEventListener('click', self.toggle, false);\n    }\n\n    // associate target to init object\n    element.Collapse = self;\n  }\n\n  /**\n   * Points the focus to a specific element.\n   * @param {HTMLElement} element target\n   */\n  var setFocus = function (element) { return element.focus(); };\n\n  /* Native JavaScript for Bootstrap 4 | Dropdown\n  ----------------------------------------------- */\n\n  // DROPDOWN DEFINITION\n  // ===================\n\n  function Dropdown(elem, option) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // targets\n    var relatedTarget = null;\n    var parent; var menu; var menuItems = [];\n    // option\n    var persist;\n\n    // preventDefault on empty anchor links\n    function preventEmptyAnchor(anchor) {\n      if ((anchor.hasAttribute('href') && anchor.href.slice(-1) === '#') || (anchor.parentNode\n        && anchor.parentNode.hasAttribute('href')\n        && anchor.parentNode.href.slice(-1) === '#')) { this.preventDefault(); }\n    }\n    // toggle dismissible events\n    function toggleDismiss() {\n      var action = element.open ? 'addEventListener' : 'removeEventListener';\n      document[action]('click', dismissHandler, false);\n      document[action]('keydown', preventScroll, false);\n      document[action]('keyup', keyHandler, false);\n      document[action]('focus', dismissHandler, false);\n    }\n    // handlers\n    function dismissHandler(e) {\n      var eventTarget = e.target;\n      if (!eventTarget.getAttribute) { return; } // some weird FF bug #409\n      var hasData = ((eventTarget && (eventTarget.getAttribute('data-toggle')))\n                                  || (eventTarget.parentNode && eventTarget.parentNode.getAttribute\n                                  && eventTarget.parentNode.getAttribute('data-toggle')));\n      if (e.type === 'focus' && (eventTarget === element || eventTarget === menu || menu.contains(eventTarget))) {\n        return;\n      }\n      if ((eventTarget === menu || menu.contains(eventTarget)) && (persist || hasData)) { return; }\n\n      relatedTarget = eventTarget === element || element.contains(eventTarget) ? element : null;\n      self.hide();\n\n      preventEmptyAnchor.call(e, eventTarget);\n    }\n    function clickHandler(e) {\n      relatedTarget = element;\n      self.show();\n      preventEmptyAnchor.call(e, e.target);\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 38 || key === 40) { e.preventDefault(); }\n    }\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      var activeItem = document.activeElement;\n      var isSameElement = activeItem === element;\n      var isInsideMenu = menu.contains(activeItem);\n      var isMenuItem = activeItem.parentNode === menu || activeItem.parentNode.parentNode === menu;\n      var idx = menuItems.indexOf(activeItem);\n\n      if (isMenuItem) { // navigate up | down\n        if (isSameElement) {\n          idx = 0;\n        } else if (key === 38) {\n          idx = idx > 1 ? idx - 1 : 0;\n        } else if (key === 40) {\n          idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n        }\n\n        if (menuItems[idx]) { setFocus(menuItems[idx]); }\n      }\n      if (((menuItems.length && isMenuItem) // menu has items\n            || (!menuItems.length && (isInsideMenu || isSameElement)) // menu might be a form\n            || !isInsideMenu) // or the focused element is not in the menu at all\n            && element.open && key === 27 // menu must be open\n      ) {\n        self.toggle();\n        relatedTarget = null;\n      }\n    }\n\n    // public methods\n    self.show = function () {\n      showCustomEvent = bootstrapCustomEvent('show', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.add('show');\n      parent.classList.add('show');\n      element.setAttribute('aria-expanded', true);\n      element.open = true;\n      element.removeEventListener('click', clickHandler, false);\n      setTimeout(function () {\n        setFocus(menu.getElementsByTagName('INPUT')[0] || element); // focus the first input item | element\n        toggleDismiss();\n        shownCustomEvent = bootstrapCustomEvent('shown', 'dropdown', { relatedTarget: relatedTarget });\n        dispatchCustomEvent.call(parent, shownCustomEvent);\n      }, 1);\n    };\n    self.hide = function () {\n      hideCustomEvent = bootstrapCustomEvent('hide', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.remove('show');\n      parent.classList.remove('show');\n      element.setAttribute('aria-expanded', false);\n      element.open = false;\n      toggleDismiss();\n      setFocus(element);\n      setTimeout(function () {\n        // only re-attach handler if the init is not disposed\n        if (element.Dropdown) { element.addEventListener('click', clickHandler, false); }\n      }, 1);\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hiddenCustomEvent);\n    };\n    self.toggle = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); } else { self.show(); }\n    };\n    self.dispose = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); }\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Dropdown;\n    };\n\n    // init\n\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Dropdown) { element.Dropdown.dispose(); }\n\n    // set  targets\n    parent = element.parentNode;\n    menu = querySelector('.dropdown-menu', parent);\n\n    Array.from(menu.children).forEach(function (child) {\n      if (child.children.length && child.children[0].tagName === 'A') {\n        menuItems.push(child.children[0]);\n      }\n      if (child.tagName === 'A') { menuItems.push(child); }\n    });\n\n    // prevent adding event handlers twice\n    if (!element.Dropdown) {\n      if (!('tabindex' in menu)) { menu.setAttribute('tabindex', '0'); } // Fix onblur on Chrome | Safari\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    // set option\n    persist = option === true || element.getAttribute('data-persist') === 'true' || false;\n\n    // set initial state to closed\n    element.open = false;\n\n    // associate element with init object\n    element.Dropdown = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Modal\n  -------------------------------------------- */\n\n  // MODAL DEFINITION\n  // ================\n\n  function Modal(elem, opsInput) { // element can be the modal/triggering button\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind, modal\n    var self = this;\n    var modal;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // event targets and other\n    var relatedTarget = null;\n    var scrollBarWidth;\n    var overlay;\n    var overlayDelay;\n\n    // also find fixed-top / fixed-bottom items\n    var fixedItems;\n    var ops = {};\n\n    // private methods\n    function setScrollbar() {\n      var bodyClassList = document.body.classList;\n      var openModal = bodyClassList.contains('modal-open');\n      var bodyPad = parseInt(getComputedStyle(document.body).paddingRight, 10);\n      var docClientHeight = document.documentElement.clientHeight;\n      var docScrollHeight = document.documentElement.scrollHeight;\n      var bodyClientHeight = document.body.clientHeight;\n      var bodyScrollHeight = document.body.scrollHeight;\n      var bodyOverflow = docClientHeight !== docScrollHeight\n                      || bodyClientHeight !== bodyScrollHeight;\n      var modalOverflow = modal.clientHeight !== modal.scrollHeight;\n\n      scrollBarWidth = measureScrollbar();\n\n      modal.style.paddingRight = !modalOverflow && scrollBarWidth ? (scrollBarWidth + \"px\") : '';\n      document.body.style.paddingRight = modalOverflow || bodyOverflow\n        ? ((bodyPad + (openModal ? 0 : scrollBarWidth)) + \"px\") : '';\n\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          var itemPad = getComputedStyle(fixed).paddingRight;\n          fixed.style.paddingRight = modalOverflow || bodyOverflow\n            ? ((parseInt(itemPad, 10) + (openModal ? 0 : scrollBarWidth)) + \"px\")\n            : ((parseInt(itemPad, 10)) + \"px\");\n        });\n      }\n    }\n    function resetScrollbar() {\n      document.body.style.paddingRight = '';\n      modal.style.paddingRight = '';\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          fixed.style.paddingRight = '';\n        });\n      }\n    }\n    function measureScrollbar() {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = 'modal-scrollbar-measure'; // this is here to stay\n      document.body.appendChild(scrollDiv);\n      var widthValue = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return widthValue;\n    }\n    function createOverlay() {\n      var newOverlay = document.createElement('div');\n      overlay = querySelector('.modal-backdrop');\n\n      if (overlay === null) {\n        newOverlay.setAttribute('class', (\"modal-backdrop\" + (ops.animation ? ' fade' : '')));\n        overlay = newOverlay;\n        document.body.appendChild(overlay);\n      }\n      return overlay;\n    }\n    function removeOverlay() {\n      overlay = querySelector('.modal-backdrop');\n      if (overlay && !document.getElementsByClassName('modal show')[0]) {\n        document.body.removeChild(overlay); overlay = null;\n      }\n      if (overlay === null) {\n        document.body.classList.remove('modal-open');\n        resetScrollbar();\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      window[action]('resize', self.update, passiveHandler);\n      modal[action]('click', dismissHandler, false);\n      document[action]('keydown', keyHandler, false);\n    }\n    // triggers\n    function beforeShow() {\n      modal.style.display = 'block';\n\n      setScrollbar();\n      if (!document.getElementsByClassName('modal show')[0]) { document.body.classList.add('modal-open'); }\n\n      modal.classList.add('show');\n      modal.setAttribute('aria-hidden', false);\n\n      if (modal.classList.contains('fade')) { emulateTransitionEnd(modal, triggerShow); }\n      else { triggerShow(); }\n    }\n    function triggerShow() {\n      setFocus(modal);\n      modal.isAnimating = false;\n\n      toggleEvents(1);\n\n      shownCustomEvent = bootstrapCustomEvent('shown', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, shownCustomEvent);\n    }\n    function triggerHide(force) {\n      modal.style.display = '';\n      if (element) { setFocus(element); }\n\n      overlay = querySelector('.modal-backdrop');\n\n      // force can also be the transitionEvent object, we wanna make sure it's not\n      if (force !== 1 && overlay && overlay.classList.contains('show') && !document.getElementsByClassName('modal show')[0]) {\n        overlay.classList.remove('show');\n        emulateTransitionEnd(overlay, removeOverlay);\n      } else {\n        removeOverlay();\n      }\n\n      toggleEvents();\n\n      modal.isAnimating = false;\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'modal');\n      dispatchCustomEvent.call(modal, hiddenCustomEvent);\n    }\n    // handlers\n    function clickHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var modalID = \"#\" + (modal.getAttribute('id'));\n      var targetAttrValue = clickTarget.getAttribute('data-target') || clickTarget.getAttribute('href');\n      var elemAttrValue = element.getAttribute('data-target') || element.getAttribute('href');\n\n      if (!modal.classList.contains('show')\n          && ((clickTarget === element && targetAttrValue === modalID)\n          || (element.contains(clickTarget) && elemAttrValue === modalID))) {\n        modal.modalTrigger = element;\n        relatedTarget = element;\n        self.show();\n        e.preventDefault();\n      }\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (!modal.isAnimating && ops.keyboard && which === 27 && modal.classList.contains('show')) {\n        self.hide();\n      }\n    }\n    function dismissHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var hasData = clickTarget.getAttribute('data-dismiss') === 'modal';\n      var parentWithData = clickTarget.closest('[data-dismiss=\"modal\"]');\n\n      if (modal.classList.contains('show') && (parentWithData || hasData\n          || (clickTarget === modal && ops.backdrop !== 'static'))) {\n        self.hide(); relatedTarget = null;\n        e.preventDefault();\n      }\n    }\n\n    // public methods\n    self.toggle = function () {\n      if (modal.classList.contains('show')) { self.hide(); } else { self.show(); }\n    };\n    self.show = function () {\n      if (modal.classList.contains('show') && !!modal.isAnimating) { return; }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, showCustomEvent);\n\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      // we elegantly hide any opened modal\n      var currentOpen = document.getElementsByClassName('modal show')[0];\n      if (currentOpen && currentOpen !== modal) {\n        if (currentOpen.modalTrigger) { currentOpen.modalTrigger.Modal.hide(); }\n        if (currentOpen.Modal) { currentOpen.Modal.hide(); }\n      }\n\n      if (ops.backdrop) { overlay = createOverlay(); }\n\n      if (overlay && !currentOpen && !overlay.classList.contains('show')) {\n        reflow(overlay);\n        overlayDelay = getElementTransitionDuration(overlay);\n        overlay.classList.add('show');\n      }\n\n      if (!currentOpen) { setTimeout(beforeShow, overlay && overlayDelay ? overlayDelay : 0); }\n      else { beforeShow(); }\n    };\n    self.hide = function (force) {\n      if (!modal.classList.contains('show')) { return; }\n\n      hideCustomEvent = bootstrapCustomEvent('hide', 'modal');\n      dispatchCustomEvent.call(modal, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      modal.classList.remove('show');\n      modal.setAttribute('aria-hidden', true);\n\n      if (modal.classList.contains('fade') && force !== 1) { emulateTransitionEnd(modal, triggerHide); }\n      else { triggerHide(); }\n    };\n    self.setContent = function (content) {\n      querySelector('.modal-content', modal).innerHTML = content;\n    };\n    self.update = function () {\n      if (modal.classList.contains('show')) {\n        setScrollbar();\n      }\n    };\n    self.dispose = function () {\n      self.hide(1);\n      if (element) { element.removeEventListener('click', clickHandler, false); delete element.Modal; } else { delete modal.Modal; }\n    };\n\n    // init\n\n    // the modal (both JavaScript / DATA API init) / triggering button element (DATA API)\n    element = querySelector(elem);\n\n    // determine modal, triggering element\n    var checkModal = querySelector(element.getAttribute('data-target') || element.getAttribute('href'));\n    modal = element.classList.contains('modal') ? element : checkModal;\n\n    // set fixed items\n    fixedItems = Array.from(document.getElementsByClassName('fixed-top'))\n      .concat(Array.from(document.getElementsByClassName('fixed-bottom')));\n\n    if (element.classList.contains('modal')) { element = null; } // modal is now independent of it's triggering element\n\n    // reset on re-init\n    if (element && element.Modal) { element.Modal.dispose(); }\n    if (modal && modal.Modal) { modal.Modal.dispose(); }\n\n    // set options\n    ops.keyboard = !(options.keyboard === false || modal.getAttribute('data-keyboard') === 'false');\n    ops.backdrop = options.backdrop === 'static' || modal.getAttribute('data-backdrop') === 'static' ? 'static' : true;\n    ops.backdrop = options.backdrop === false || modal.getAttribute('data-backdrop') === 'false' ? false : ops.backdrop;\n    ops.animation = !!modal.classList.contains('fade');\n    ops.content = options.content; // JavaScript only\n\n    // set an initial state of the modal\n    modal.isAnimating = false;\n\n    // prevent adding event handlers over and over\n    // modal is independent of a triggering element\n    if (element && !element.Modal) {\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (ops.content) {\n      self.setContent(ops.content.trim());\n    }\n\n    // set associations\n    if (element) {\n      modal.modalTrigger = element;\n      element.Modal = self;\n    } else {\n      modal.Modal = self;\n    }\n  }\n\n  /**\n   * A global namespace for mouse click events.\n   * @type {Record<string, string>}\n   */\n  var mouseClickEvents = { down: 'mousedown', up: 'mouseup' };\n\n  /**\n   * Returns the `Window` / `HTML` scroll position.\n   * Popover, Tooltip & ScrollSpy need it.\n   *\n   * @returns {{x: number, y: number}} the scroll `{x,y}` values\n   */\n  function getScroll() {\n    return {\n      y: window.pageYOffset || document.documentElement.scrollTop,\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n    };\n  }\n\n  // both popovers and tooltips (target,tooltip,placement,elementToAppendTo)\n  function styleTip(link, element, originalPosition, parent) {\n    var tipPositions = /\\b(top|bottom|left|right)+/;\n    var elementDimensions = { w: element.offsetWidth, h: element.offsetHeight };\n    var windowWidth = (document.documentElement.clientWidth || document.body.clientWidth);\n    var windowHeight = (document.documentElement.clientHeight || document.body.clientHeight);\n    var rect = link.getBoundingClientRect();\n    var scroll = parent === document.body\n      ? getScroll()\n      : { x: parent.offsetLeft + parent.scrollLeft, y: parent.offsetTop + parent.scrollTop };\n    var linkDimensions = { w: rect.right - rect.left, h: rect.bottom - rect.top };\n    var isPopover = element.classList.contains('popover');\n    var arrow = element.getElementsByClassName('arrow')[0];\n    var halfTopExceed = rect.top + linkDimensions.h / 2 - elementDimensions.h / 2 < 0;\n    var halfLeftExceed = rect.left + linkDimensions.w / 2 - elementDimensions.w / 2 < 0;\n    var halfRightExceed = rect.left + elementDimensions.w / 2\n      + linkDimensions.w / 2 >= windowWidth;\n    var halfBottomExceed = rect.top + elementDimensions.h / 2\n      + linkDimensions.h / 2 >= windowHeight;\n    var topExceed = rect.top - elementDimensions.h < 0;\n    var leftExceed = rect.left - elementDimensions.w < 0;\n    var bottomExceed = rect.top + elementDimensions.h + linkDimensions.h >= windowHeight;\n    var rightExceed = rect.left + elementDimensions.w + linkDimensions.w >= windowWidth;\n    var position = originalPosition;\n\n    // recompute position\n    // first, when both left and right limits are exceeded, we fall back to top|bottom\n    position = (position === 'left' || position === 'right') && leftExceed && rightExceed ? 'top' : position;\n    position = position === 'top' && topExceed ? 'bottom' : position;\n    position = position === 'bottom' && bottomExceed ? 'top' : position;\n    position = position === 'left' && leftExceed ? 'right' : position;\n    position = position === 'right' && rightExceed ? 'left' : position;\n\n    var topPosition;\n    var leftPosition;\n    var arrowTop;\n    var arrowLeft;\n\n    // update tooltip/popover class\n    if (element.className.indexOf(position) === -1) {\n      element.className = element.className.replace(tipPositions, position);\n    }\n\n    // we check the computed width & height and update here\n    var arrowWidth = arrow.offsetWidth;\n    var arrowHeight = arrow.offsetHeight;\n\n    // apply styling to tooltip or popover\n    // secondary|side positions\n    if (position === 'left' || position === 'right') {\n      if (position === 'left') { // LEFT\n        leftPosition = rect.left + scroll.x - elementDimensions.w - (isPopover ? arrowWidth : 0);\n      } else { // RIGHT\n        leftPosition = rect.left + scroll.x + linkDimensions.w;\n      }\n\n      // adjust top and arrow\n      if (halfTopExceed) {\n        topPosition = rect.top + scroll.y;\n        arrowTop = linkDimensions.h / 2 - arrowWidth;\n      } else if (halfBottomExceed) {\n        topPosition = rect.top + scroll.y - elementDimensions.h + linkDimensions.h;\n        arrowTop = elementDimensions.h - linkDimensions.h / 2 - arrowWidth;\n      } else {\n        topPosition = rect.top + scroll.y - elementDimensions.h / 2 + linkDimensions.h / 2;\n        arrowTop = elementDimensions.h / 2 - (isPopover ? arrowHeight * 0.9 : arrowHeight / 2);\n      }\n    // primary|vertical positions\n    } else if (position === 'top' || position === 'bottom') {\n      if (position === 'top') { // TOP\n        topPosition = rect.top + scroll.y - elementDimensions.h - (isPopover ? arrowHeight : 0);\n      } else { // BOTTOM\n        topPosition = rect.top + scroll.y + linkDimensions.h;\n      }\n      // adjust left | right and also the arrow\n      if (halfLeftExceed) {\n        leftPosition = 0;\n        arrowLeft = rect.left + linkDimensions.w / 2 - arrowWidth;\n      } else if (halfRightExceed) {\n        leftPosition = windowWidth - elementDimensions.w * 1.01;\n        arrowLeft = elementDimensions.w - (windowWidth - rect.left)\n          + linkDimensions.w / 2 - arrowWidth / 2;\n      } else {\n        leftPosition = rect.left + scroll.x - elementDimensions.w / 2 + linkDimensions.w / 2;\n        arrowLeft = elementDimensions.w / 2 - (isPopover ? arrowWidth : arrowWidth / 2);\n      }\n    }\n\n    // apply style to tooltip/popover and its arrow\n    element.style.top = topPosition + \"px\";\n    element.style.left = leftPosition + \"px\";\n\n    if (arrowTop) { arrow.style.top = arrowTop + \"px\"; }\n    if (arrowLeft) { arrow.style.left = arrowLeft + \"px\"; }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Popover\n  ---------------------------------------------- */\n\n  // POPOVER DEFINITION\n  // ==================\n\n  function Popover(elem, opsInput) {\n    var element;\n    // set instance options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // popover and timer\n    var popover = null;\n    var timer = 0;\n    var isIphone = /(iPhone|iPod|iPad)/.test(navigator.userAgent);\n    // title and content\n    var titleString;\n    var contentString;\n    var placementClass;\n\n    // options\n    var ops = {};\n\n    // close btn for dissmissible popover\n    var closeBtn;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // handlers\n    function dismissibleHandler(e) {\n      if (popover !== null && e.target === querySelector('.close', popover)) {\n        self.hide();\n      }\n    }\n    // private methods\n    function getAttr(att) {\n      return options[att] || element.dataset[att] || null;\n    }\n    function getTitle() {\n      return getAttr('title');\n    }\n    function getContent() {\n      return getAttr('content');\n    }\n    function removePopover() {\n      ops.container.removeChild(popover);\n      timer = null; popover = null;\n    }\n\n    function createPopover() {\n      titleString = getTitle();\n      contentString = getContent();\n      // fixing https://github.com/thednp/bootstrap.native/issues/233\n      contentString = contentString ? contentString.trim() : null;\n\n      popover = document.createElement('div');\n\n      // popover arrow\n      var popoverArrow = document.createElement('div');\n      popoverArrow.classList.add('arrow');\n      popover.appendChild(popoverArrow);\n\n      // create the popover from data attributes\n      if (contentString !== null && ops.template === null) {\n        popover.setAttribute('role', 'tooltip');\n\n        if (titleString !== null) {\n          var popoverTitle = document.createElement('h3');\n          popoverTitle.classList.add('popover-header');\n          popoverTitle.innerHTML = ops.dismissible ? titleString + closeBtn : titleString;\n          popover.appendChild(popoverTitle);\n        }\n\n        // set popover content\n        var popoverBodyMarkup = document.createElement('div');\n        popoverBodyMarkup.classList.add('popover-body');\n        popoverBodyMarkup.innerHTML = ops.dismissible && titleString === null\n          ? contentString + closeBtn\n          : contentString;\n        popover.appendChild(popoverBodyMarkup);\n      } else { // or create the popover from template\n        var popoverTemplate = document.createElement('div');\n        popoverTemplate.innerHTML = ops.template.trim();\n        popover.className = popoverTemplate.firstChild.className;\n        popover.innerHTML = popoverTemplate.firstChild.innerHTML;\n\n        var popoverHeader = querySelector('.popover-header', popover);\n        var popoverBody = querySelector('.popover-body', popover);\n\n        // fill the template with content from data attributes\n        if (titleString && popoverHeader) { popoverHeader.innerHTML = titleString.trim(); }\n        if (contentString && popoverBody) { popoverBody.innerHTML = contentString.trim(); }\n      }\n\n      // append to the container\n      ops.container.appendChild(popover);\n      popover.style.display = 'block';\n      if (!popover.classList.contains('popover')) { popover.classList.add('popover'); }\n      if (!popover.classList.contains(ops.animation)) { popover.classList.add(ops.animation); }\n      if (!popover.classList.contains(placementClass)) { popover.classList.add(placementClass); }\n    }\n    function showPopover() {\n      if (!popover.classList.contains('show')) { popover.classList.add('show'); }\n    }\n    function updatePopover() {\n      styleTip(element, popover, ops.placement, ops.container);\n    }\n    function forceFocus() {\n      if (popover === null) { element.focus(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.trigger === 'hover') {\n        element[action](mouseClickEvents.down, self.show);\n        element[action](mouseHoverEvents[0], self.show);\n        // mouseHover = ('onmouseleave' in document)\n        //   ? [ 'mouseenter', 'mouseleave']\n        //   : [ 'mouseover', 'mouseout' ]\n        if (!ops.dismissible) { element[action](mouseHoverEvents[1], self.hide); }\n      } else if (ops.trigger === 'click') {\n        element[action](ops.trigger, self.toggle);\n      } else if (ops.trigger === 'focus') {\n        if (isIphone) { element[action]('click', forceFocus, false); }\n        element[action](ops.trigger, self.toggle);\n      }\n    }\n    function touchHandler(e) {\n      if ((popover && popover.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // event toggle\n    function dismissHandlerToggle(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.dismissible) {\n        document[action]('click', dismissibleHandler, false);\n      } else {\n        if (ops.trigger === 'focus') { element[action]('blur', self.hide); }\n        if (ops.trigger === 'hover') { document[action]('touchstart', touchHandler, passiveHandler); }\n      }\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    // triggers\n    function showTrigger() {\n      dismissHandlerToggle(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideTrigger() {\n      dismissHandlerToggle();\n      removePopover();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n\n    // public methods / handlers\n    self.toggle = function () {\n      if (popover === null) { self.show(); }\n      else { self.hide(); }\n    };\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n\n          createPopover();\n          updatePopover();\n          showPopover();\n          if (ops.animation) { emulateTransitionEnd(popover, showTrigger); }\n          else { showTrigger(); }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover && popover !== null && popover.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          popover.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(popover, hideTrigger); }\n          else { hideTrigger(); }\n        }\n      }, ops.delay);\n    };\n    self.dispose = function () {\n      self.hide();\n      toggleEvents();\n      delete element.Popover;\n    };\n\n    // INIT\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Popover) { element.Popover.dispose(); }\n\n    // DATA API\n    var triggerData = element.getAttribute('data-trigger'); // click / hover / focus\n    var animationData = element.getAttribute('data-animation'); // true / false\n\n    var placementData = element.getAttribute('data-placement');\n    var dismissibleData = element.getAttribute('data-dismissible');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // close btn for dissmissible popover\n    closeBtn = '<button type=\"button\" class=\"close\">×</button>';\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'popover');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'popover');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'popover');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'popover');\n\n    // check container\n    var containerElement = querySelector(options.container);\n    var containerDataElement = querySelector(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.trigger = options.trigger ? options.trigger : triggerData || 'hover';\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.dismissible = !!(options.dismissible || dismissibleData === 'true');\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    placementClass = \"bs-popover-\" + (ops.placement);\n\n    // invalidate\n    titleString = getTitle();\n    contentString = getContent();\n\n    if (!contentString && !ops.template) { return; }\n\n    // init\n    if (!element.Popover) { // prevent adding event handlers twice\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Popover = self;\n  }\n\n  /* Native JavaScript for Bootstrap 5 | ScrollSpy\n  ------------------------------------------------ */\n\n  // SCROLLSPY DEFINITION\n  // ====================\n\n  function ScrollSpy(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // GC internals\n    var vars;\n    var links;\n\n    // targets\n    var spyTarget;\n    // determine which is the real scrollTarget\n    var scrollTarget;\n    // options\n    var ops = {};\n\n    // private methods\n    // populate items and targets\n    function updateTargets() {\n      links = spyTarget.getElementsByTagName('A');\n\n      vars.scrollTop = vars.isWindow ? getScroll().y : element.scrollTop;\n\n      // only update vars once or with each mutation\n      if (vars.length !== links.length || getScrollHeight() !== vars.scrollHeight) {\n        var href;\n        var targetItem;\n        var rect;\n\n        // reset arrays & update\n        vars.items = [];\n        vars.offsets = [];\n        vars.scrollHeight = getScrollHeight();\n        vars.maxScroll = vars.scrollHeight - getOffsetHeight();\n\n        Array.from(links).forEach(function (link) {\n          href = link.getAttribute('href');\n          targetItem = href && href.charAt(0) === '#' && href.slice(-1) !== '#' && querySelector(href);\n\n          if (targetItem) {\n            vars.items.push(link);\n            rect = targetItem.getBoundingClientRect();\n            vars.offsets.push((vars.isWindow\n              ? rect.top + vars.scrollTop\n              : targetItem.offsetTop) - ops.offset);\n          }\n        });\n        vars.length = vars.items.length;\n      }\n    }\n    // item update\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      scrollTarget[action]('scroll', self.refresh, passiveHandler);\n      window[action]('resize', self.refresh, passiveHandler);\n    }\n    function getScrollHeight() {\n      return scrollTarget.scrollHeight || Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      );\n    }\n    function getOffsetHeight() {\n      return !vars.isWindow ? element.getBoundingClientRect().height : window.innerHeight;\n    }\n    function clear() {\n      Array.from(links).map(function (item) { return item.classList.contains('active') && item.classList.remove('active'); });\n    }\n    function activate(input) {\n      var item = input;\n      var itemClassList;\n      clear();\n      vars.activeItem = item;\n      item.classList.add('active');\n\n      // activate all parents\n      var parents = [];\n      while (item.parentNode !== document.body) {\n        item = item.parentNode;\n        itemClassList = item.classList;\n\n        if (itemClassList.contains('dropdown-menu') || itemClassList.contains('nav')) { parents.push(item); }\n      }\n\n      parents.forEach(function (menuItem) {\n        var parentLink = menuItem.previousElementSibling;\n\n        if (parentLink && !parentLink.classList.contains('active')) {\n          parentLink.classList.add('active');\n        }\n      });\n\n      dispatchCustomEvent.call(element, bootstrapCustomEvent('activate', 'scrollspy', { relatedTarget: vars.activeItem }));\n    }\n\n    // public method\n    self.refresh = function () {\n      updateTargets();\n\n      if (vars.scrollTop >= vars.maxScroll) {\n        var newActiveItem = vars.items[vars.length - 1];\n\n        if (vars.activeItem !== newActiveItem) {\n          activate(newActiveItem);\n        }\n\n        return;\n      }\n\n      if (vars.activeItem && vars.scrollTop < vars.offsets[0] && vars.offsets[0] > 0) {\n        vars.activeItem = null;\n        clear();\n        return;\n      }\n\n      var i = vars.length;\n      while (i > -1) {\n        if (vars.activeItem !== vars.items[i] && vars.scrollTop >= vars.offsets[i]\n          && (typeof vars.offsets[i + 1] === 'undefined' || vars.scrollTop < vars.offsets[i + 1])) {\n          activate(vars.items[i]);\n        }\n        i -= 1;\n      }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      delete element.ScrollSpy;\n    };\n\n    // init\n    // initialization element, the element we spy on\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.ScrollSpy) { element.ScrollSpy.dispose(); }\n\n    // event targets, constants\n    // DATA API\n    var targetData = element.getAttribute('data-target');\n    var offsetData = element.getAttribute('data-offset');\n\n    // targets\n    spyTarget = querySelector(options.target || targetData);\n\n    // determine which is the real scrollTarget\n    scrollTarget = element.clientHeight < element.scrollHeight ? element : window;\n\n    if (!spyTarget) { return; }\n\n    // set instance option\n    ops.offset = +(options.offset || offsetData) || 10;\n\n    // set instance priority variables\n    vars = {};\n    vars.length = 0;\n    vars.items = [];\n    vars.offsets = [];\n    vars.isWindow = scrollTarget === window;\n    vars.activeItem = null;\n    vars.scrollHeight = 0;\n    vars.maxScroll = 0;\n\n    // prevent adding event handlers twice\n    if (!element.ScrollSpy) { toggleEvents(1); }\n\n    self.refresh();\n\n    // associate target with init object\n    element.ScrollSpy = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tab\n  ------------------------------------------ */\n\n  // TAB DEFINITION\n  // ==============\n\n  function Tab(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // event targets\n    var tabs;\n    var dropdown;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // more GC material\n    var next;\n    var tabsContentContainer = false;\n    var activeTab;\n    var activeContent;\n    var nextContent;\n    var containerHeight;\n    var equalContents;\n    var nextHeight;\n\n    // triggers\n    function triggerEnd() {\n      tabsContentContainer.style.height = '';\n      tabsContentContainer.classList.remove('collapsing');\n      tabs.isAnimating = false;\n    }\n    function triggerShow() {\n      if (tabsContentContainer) { // height animation\n        if (equalContents) {\n          triggerEnd();\n        } else {\n          setTimeout(function () { // enables height animation\n            tabsContentContainer.style.height = nextHeight + \"px\"; // height animation\n            reflow(tabsContentContainer);\n            emulateTransitionEnd(tabsContentContainer, triggerEnd);\n          }, 50);\n        }\n      } else {\n        tabs.isAnimating = false;\n      }\n      shownCustomEvent = bootstrapCustomEvent('shown', 'tab', { relatedTarget: activeTab });\n      dispatchCustomEvent.call(next, shownCustomEvent);\n    }\n    function triggerHide() {\n      if (tabsContentContainer) {\n        activeContent.style.float = 'left';\n        nextContent.style.float = 'left';\n        containerHeight = activeContent.scrollHeight;\n      }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'tab', { relatedTarget: activeTab });\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tab', { relatedTarget: next });\n\n      dispatchCustomEvent.call(next, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      nextContent.classList.add('active');\n\n      activeContent.classList.remove('active');\n\n      if (tabsContentContainer) {\n        nextHeight = nextContent.scrollHeight;\n        equalContents = nextHeight === containerHeight;\n        tabsContentContainer.classList.add('collapsing');\n        tabsContentContainer.style.height = containerHeight + \"px\"; // height animation\n        reflow(tabsContentContainer);\n        activeContent.style.float = '';\n        nextContent.style.float = '';\n      }\n\n      if (nextContent.classList.contains('fade')) {\n        setTimeout(function () {\n          nextContent.classList.add('show');\n          emulateTransitionEnd(nextContent, triggerShow);\n        }, 20);\n      } else { triggerShow(); }\n\n      dispatchCustomEvent.call(activeTab, hiddenCustomEvent);\n    }\n    // private methods\n    function getActiveTab() {\n      var assign;\n\n      var activeTabs = tabs.getElementsByClassName('active');\n\n      if (activeTabs.length === 1 && !activeTabs[0].parentNode.classList.contains('dropdown')) {\n        (assign = activeTabs, activeTab = assign[0]);\n      } else if (activeTabs.length > 1) {\n        activeTab = activeTabs[activeTabs.length - 1];\n      }\n      return activeTab;\n    }\n    function getActiveContent() { return querySelector(getActiveTab().getAttribute('href')); }\n    // handler\n    function clickHandler(e) {\n      e.preventDefault();\n      next = e.currentTarget;\n      if (!tabs.isAnimating) { self.show(); }\n    }\n\n    // public method\n    self.show = function () { // the tab we clicked is now the next tab\n      next = next || element;\n\n      if (!next.classList.contains('active')) {\n        nextContent = querySelector(next.getAttribute('href')); // this is the actual object, the next tab content to activate\n        activeTab = getActiveTab();\n        activeContent = getActiveContent();\n\n        hideCustomEvent = bootstrapCustomEvent('hide', 'tab', { relatedTarget: next });\n        dispatchCustomEvent.call(activeTab, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        tabs.isAnimating = true;\n        activeTab.classList.remove('active');\n        activeTab.setAttribute('aria-selected', 'false');\n        next.classList.add('active');\n        next.setAttribute('aria-selected', 'true');\n\n        if (dropdown) {\n          if (!element.parentNode.classList.contains('dropdown-menu')) {\n            if (dropdown.classList.contains('active')) { dropdown.classList.remove('active'); }\n          } else if (!dropdown.classList.contains('active')) { dropdown.classList.add('active'); }\n        }\n\n        if (activeContent.classList.contains('fade')) {\n          activeContent.classList.remove('show');\n          emulateTransitionEnd(activeContent, triggerHide);\n        } else { triggerHide(); }\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Tab;\n    };\n\n    // INIT\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Tab) { element.Tab.dispose(); }\n\n    // DATA API\n    var heightData = element.getAttribute('data-height');\n    // event targets\n    tabs = element.closest('.nav');\n    dropdown = tabs && querySelector('.dropdown-toggle', tabs);\n\n    // instance options\n    var animateHeight = !(!supportTransition || (options.height === false || heightData === 'false'));\n\n    // set default animation state\n    tabs.isAnimating = false;\n\n    // init\n    if (!element.Tab) { // prevent adding event handlers twice\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (animateHeight) { tabsContentContainer = getActiveContent().parentNode; }\n\n    // associate target with init object\n    element.Tab = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Toast\n  -------------------------------------------- */\n\n  // TOAST DEFINITION\n  // ==================\n\n  function Toast(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // toast, timer\n    var toast;\n    var timer = 0;\n\n    // custom events\n    var showCustomEvent;\n    var hideCustomEvent;\n    var shownCustomEvent;\n    var hiddenCustomEvent;\n    var ops = {};\n\n    // private methods\n    function showComplete() {\n      toast.classList.remove('showing');\n      toast.classList.add('show');\n      dispatchCustomEvent.call(toast, shownCustomEvent);\n      if (ops.autohide) { self.hide(); }\n    }\n    function hideComplete() {\n      toast.classList.add('hide');\n      dispatchCustomEvent.call(toast, hiddenCustomEvent);\n    }\n    function close() {\n      toast.classList.remove('show');\n      if (ops.animation) { emulateTransitionEnd(toast, hideComplete); }\n      else { hideComplete(); }\n    }\n    function disposeComplete() {\n      clearTimeout(timer);\n      element.removeEventListener('click', self.hide, false);\n\n      delete element.Toast;\n    }\n\n    // public methods\n    self.show = function () {\n      if (toast && !toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, showCustomEvent);\n        if (showCustomEvent.defaultPrevented) { return; }\n        if (ops.animation) { toast.classList.add('fade'); }\n        toast.classList.remove('hide');\n        reflow(toast); // force reflow\n        toast.classList.add('showing');\n\n        if (ops.animation) { emulateTransitionEnd(toast, showComplete); }\n        else { showComplete(); }\n      }\n    };\n    self.hide = function (noTimer) {\n      if (toast && toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        if (noTimer) { close(); }\n        else { timer = setTimeout(close, ops.delay); }\n      }\n    };\n    self.dispose = function () {\n      if (ops.animation) { emulateTransitionEnd(toast, disposeComplete); }\n      else { disposeComplete(); }\n    };\n\n    // init\n\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Toast) { element.Toast.dispose(); }\n\n    // toast, timer\n    toast = element.closest('.toast');\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var autohideData = element.getAttribute('data-autohide');\n    var delayData = element.getAttribute('data-delay');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'toast');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'toast');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'toast');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'toast');\n\n    // set instance options\n    ops.animation = options.animation === false || animationData === 'false' ? 0 : 1; // true by default\n    ops.autohide = options.autohide === false || autohideData === 'false' ? 0 : 1; // true by default\n    ops.delay = parseInt((options.delay || delayData), 10) || 500; // 500ms default\n\n    if (!element.Toast) { // prevent adding event handlers twice\n      element.addEventListener('click', self.hide, false);\n    }\n\n    // associate targets to init object\n    element.Toast = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tooltip\n  ---------------------------------------------- */\n\n  // TOOLTIP DEFINITION\n  // ==================\n\n  function Tooltip(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // tooltip, timer, and title\n    var tooltip = null;\n    var timer = 0;\n    var titleString;\n    var placementClass;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    var ops = {};\n\n    // private methods\n    function getTitle() {\n      return element.getAttribute('title')\n          || element.getAttribute('data-title')\n          || element.getAttribute('data-original-title');\n    }\n    function removeToolTip() {\n      ops.container.removeChild(tooltip);\n      tooltip = null; timer = null;\n    }\n    function createToolTip() {\n      titleString = getTitle(); // read the title again\n      if (titleString) { // invalidate, maybe markup changed\n        // create tooltip\n        tooltip = document.createElement('div');\n\n        // set markup\n        if (ops.template) {\n          var tooltipMarkup = document.createElement('div');\n          tooltipMarkup.innerHTML = ops.template.trim();\n\n          tooltip.className = tooltipMarkup.firstChild.className;\n          tooltip.innerHTML = tooltipMarkup.firstChild.innerHTML;\n\n          querySelector('.tooltip-inner', tooltip).innerHTML = titleString.trim();\n        } else {\n          // tooltip arrow\n          var tooltipArrow = document.createElement('div');\n          tooltipArrow.classList.add('arrow');\n          tooltip.appendChild(tooltipArrow);\n          // tooltip inner\n          var tooltipInner = document.createElement('div');\n          tooltipInner.classList.add('tooltip-inner');\n          tooltip.appendChild(tooltipInner);\n          tooltipInner.innerHTML = titleString;\n        }\n        // reset position\n        tooltip.style.left = '0';\n        tooltip.style.top = '0';\n        // set class and role attribute\n        tooltip.setAttribute('role', 'tooltip');\n        if (!tooltip.classList.contains('tooltip')) { tooltip.classList.add('tooltip'); }\n        if (!tooltip.classList.contains(ops.animation)) { tooltip.classList.add(ops.animation); }\n        if (!tooltip.classList.contains(placementClass)) { tooltip.classList.add(placementClass); }\n        // append to container\n        ops.container.appendChild(tooltip);\n      }\n    }\n    function updateTooltip() {\n      styleTip(element, tooltip, ops.placement, ops.container);\n    }\n    function showTooltip() {\n      if (!tooltip.classList.contains('show')) { tooltip.classList.add('show'); }\n    }\n    function touchHandler(e) {\n      if ((tooltip && tooltip.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // triggers\n    function toggleAction(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      document[action]('touchstart', touchHandler, passiveHandler);\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    function showAction() {\n      toggleAction(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideAction() {\n      toggleAction();\n      removeToolTip();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action](mouseClickEvents.down, self.show, false);\n      element[action](mouseHoverEvents[0], self.show, false);\n      element[action](mouseHoverEvents[1], self.hide, false);\n    }\n\n    // public methods\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n          // if(createToolTip() == false) return;\n          if (createToolTip() !== false) {\n            updateTooltip();\n            showTooltip();\n            if (ops.animation) { emulateTransitionEnd(tooltip, showAction); }\n            else { showAction(); }\n          }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip && tooltip.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          tooltip.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(tooltip, hideAction); }\n          else { hideAction(); }\n        }\n      }, ops.delay);\n    };\n    self.toggle = function () {\n      if (!tooltip) { self.show(); }\n      else { self.hide(); }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      self.hide();\n      element.setAttribute('title', element.getAttribute('data-original-title'));\n      element.removeAttribute('data-original-title');\n      delete element.Tooltip;\n    };\n\n    // init\n    // initialization element\n    element = querySelector(elem);\n\n    // reset on re-init\n    if (element.Tooltip) { element.Tooltip.dispose(); }\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var placementData = element.getAttribute('data-placement');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // check container\n    var containerElement = querySelector(options.container);\n    var containerDataElement = querySelector(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'tooltip');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'tooltip');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'tooltip');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tooltip');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    // set placement class\n    placementClass = \"bs-tooltip-\" + (ops.placement);\n\n    // set tooltip content\n    titleString = getTitle();\n\n    // invalidate\n    if (!titleString) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Tooltip) {\n      element.setAttribute('data-original-title', titleString);\n      element.removeAttribute('title');\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Tooltip = self;\n  }\n\n  /** BSN v4 componentsInit */\n  var componentsInit = {};\n\n  /* Native JavaScript for Bootstrap v4 | Initialize Data API\n  -------------------------------------------------------- */\n  function initializeDataAPI(Constructor, collection) {\n    Array.from(collection).map(function (x) { return new Constructor(x); });\n  }\n  function initCallback(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      initializeDataAPI(componentsInit[component][0],\n        lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  componentsInit.Alert = [Alert, '[data-dismiss=\"alert\"]'];\n  componentsInit.Button = [Button, '[data-toggle=\"buttons\"]'];\n  componentsInit.Carousel = [Carousel, '[data-ride=\"carousel\"]'];\n  componentsInit.Collapse = [Collapse, '[data-toggle=\"collapse\"]'];\n  componentsInit.Dropdown = [Dropdown, '[data-toggle=\"dropdown\"]'];\n  componentsInit.Modal = [Modal, '[data-toggle=\"modal\"]'];\n  componentsInit.Popover = [Popover, '[data-toggle=\"popover\"],[data-tip=\"popover\"]'];\n  componentsInit.ScrollSpy = [ScrollSpy, '[data-spy=\"scroll\"]'];\n  componentsInit.Tab = [Tab, '[data-toggle=\"tab\"]'];\n  componentsInit.Toast = [Toast, '[data-dismiss=\"toast\"]'];\n  componentsInit.Tooltip = [Tooltip, '[data-toggle=\"tooltip\"],[data-tip=\"tooltip\"]'];\n\n  // bulk initialize all components\n  if (document.body) { initCallback(); }\n  else {\n    document.addEventListener('DOMContentLoaded', function initWrapper() {\n      initCallback();\n      document.removeEventListener('DOMContentLoaded', initWrapper, false);\n    }, false);\n  }\n\n  /* Native JavaScript for Bootstrap v4 | Remove Data API\n  ---------------------------------------------------- */\n  function removeElementDataAPI(ConstructorName, collection) {\n    Array.from(collection).map(function (x) { return x[ConstructorName].dispose(); });\n  }\n  function removeDataAPI(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      removeElementDataAPI(component, lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  var version = \"4.1.0\";\n\n  var Version = version;\n\n  var BSN = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip,\n\n    initCallback: initCallback,\n    removeDataAPI: removeDataAPI,\n    componentsInit: componentsInit,\n    Version: Version,\n  };\n\n  return BSN;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\n");

/***/ }),

/***/ "./node_modules/htmx.org/dist/htmx.min.js":
/*!************************************************!*\
  !*** ./node_modules/htmx.org/dist/htmx.min.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(e,t){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else{}})(typeof self!==\"undefined\"?self:this,function(){return function(){\"use strict\";var z={onLoad:t,process:mt,on:D,off:X,trigger:ee,ajax:or,find:C,findAll:R,closest:A,values:function(e,t){var r=Bt(e,t||\"post\");return r.values},remove:O,addClass:q,removeClass:T,toggleClass:L,takeClass:H,defineExtension:dr,removeExtension:vr,logAll:E,logger:null,config:{historyEnabled:true,historyCacheSize:10,refreshOnHistoryMiss:false,defaultSwapStyle:\"innerHTML\",defaultSwapDelay:0,defaultSettleDelay:20,includeIndicatorStyles:true,indicatorClass:\"htmx-indicator\",requestClass:\"htmx-request\",addedClass:\"htmx-added\",settlingClass:\"htmx-settling\",swappingClass:\"htmx-swapping\",allowEval:true,inlineScriptNonce:\"\",attributesToSettle:[\"class\",\"style\",\"width\",\"height\"],withCredentials:false,timeout:0,wsReconnectDelay:\"full-jitter\",wsBinaryType:\"blob\",disableSelector:\"[hx-disable], [data-hx-disable]\",useTemplateFragments:false,scrollBehavior:\"smooth\",defaultFocusScroll:false,getCacheBusterParam:false},parseInterval:v,_:e,createEventSource:function(e){return new EventSource(e,{withCredentials:true})},createWebSocket:function(e){var t=new WebSocket(e,[]);t.binaryType=z.config.wsBinaryType;return t},version:\"1.8.5\"};var r={addTriggerHandler:ft,bodyContains:re,canAccessLocalStorage:S,filterValues:Wt,hasAttribute:o,getAttributeValue:J,getClosestMatch:h,getExpressionVars:rr,getHeaders:_t,getInputValues:Bt,getInternalData:K,getSwapSpecification:Gt,getTriggerSpecs:Xe,getTarget:se,makeFragment:f,mergeObjects:ne,makeSettleInfo:Zt,oobSwap:V,selectAndSwap:Oe,settleImmediately:At,shouldCancel:Ve,triggerEvent:ee,triggerErrorEvent:Q,withExtensions:wt};var n=[\"get\",\"post\",\"put\",\"delete\",\"patch\"];var i=n.map(function(e){return\"[hx-\"+e+\"], [data-hx-\"+e+\"]\"}).join(\", \");function v(e){if(e==undefined){return undefined}if(e.slice(-2)==\"ms\"){return parseFloat(e.slice(0,-2))||undefined}if(e.slice(-1)==\"s\"){return parseFloat(e.slice(0,-1))*1e3||undefined}if(e.slice(-1)==\"m\"){return parseFloat(e.slice(0,-1))*1e3*60||undefined}return parseFloat(e)||undefined}function G(e,t){return e.getAttribute&&e.getAttribute(t)}function o(e,t){return e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(\"data-\"+t))}function J(e,t){return G(e,t)||G(e,\"data-\"+t)}function u(e){return e.parentElement}function $(){return document}function h(e,t){while(e&&!t(e)){e=u(e)}return e?e:null}function a(e,t,r){var n=J(t,r);var i=J(t,\"hx-disinherit\");if(e!==t&&i&&(i===\"*\"||i.split(\" \").indexOf(r)>=0)){return\"unset\"}else{return n}}function Z(t,r){var n=null;h(t,function(e){return n=a(t,e,r)});if(n!==\"unset\"){return n}}function d(e,t){var r=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector;return r&&r.call(e,t)}function s(e){var t=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;var r=t.exec(e);if(r){return r[1].toLowerCase()}else{return\"\"}}function l(e,t){var r=new DOMParser;var n=r.parseFromString(e,\"text/html\");var i=n.body;while(t>0){t--;i=i.firstChild}if(i==null){i=$().createDocumentFragment()}return i}function f(e){if(z.config.useTemplateFragments){var t=l(\"<body><template>\"+e+\"</template></body>\",0);return t.querySelector(\"template\").content}else{var r=s(e);switch(r){case\"thead\":case\"tbody\":case\"tfoot\":case\"colgroup\":case\"caption\":return l(\"<table>\"+e+\"</table>\",1);case\"col\":return l(\"<table><colgroup>\"+e+\"</colgroup></table>\",2);case\"tr\":return l(\"<table><tbody>\"+e+\"</tbody></table>\",2);case\"td\":case\"th\":return l(\"<table><tbody><tr>\"+e+\"</tr></tbody></table>\",3);case\"script\":return l(\"<div>\"+e+\"</div>\",1);default:return l(e,0)}}}function te(e){if(e){e()}}function g(e,t){return Object.prototype.toString.call(e)===\"[object \"+t+\"]\"}function p(e){return g(e,\"Function\")}function m(e){return g(e,\"Object\")}function K(e){var t=\"htmx-internal-data\";var r=e[t];if(!r){r=e[t]={}}return r}function y(e){var t=[];if(e){for(var r=0;r<e.length;r++){t.push(e[r])}}return t}function Y(e,t){if(e){for(var r=0;r<e.length;r++){t(e[r])}}}function x(e){var t=e.getBoundingClientRect();var r=t.top;var n=t.bottom;return r<window.innerHeight&&n>=0}function re(e){if(e.getRootNode&&e.getRootNode()instanceof ShadowRoot){return $().body.contains(e.getRootNode().host)}else{return $().body.contains(e)}}function b(e){return e.trim().split(/\\s+/)}function ne(e,t){for(var r in t){if(t.hasOwnProperty(r)){e[r]=t[r]}}return e}function w(e){try{return JSON.parse(e)}catch(e){St(e);return null}}function S(){var e=\"htmx:localStorageTest\";try{localStorage.setItem(e,e);localStorage.removeItem(e);return true}catch(e){return false}}function e(e){return Qt($().body,function(){return eval(e)})}function t(t){var e=z.on(\"htmx:load\",function(e){t(e.detail.elt)});return e}function E(){z.logger=function(e,t,r){if(console){console.log(t,e,r)}}}function C(e,t){if(t){return e.querySelector(t)}else{return C($(),e)}}function R(e,t){if(t){return e.querySelectorAll(t)}else{return R($(),e)}}function O(e,t){e=M(e);if(t){setTimeout(function(){O(e)},t)}else{e.parentElement.removeChild(e)}}function q(e,t,r){e=M(e);if(r){setTimeout(function(){q(e,t)},r)}else{e.classList&&e.classList.add(t)}}function T(e,t,r){e=M(e);if(r){setTimeout(function(){T(e,t)},r)}else{if(e.classList){e.classList.remove(t);if(e.classList.length===0){e.removeAttribute(\"class\")}}}}function L(e,t){e=M(e);e.classList.toggle(t)}function H(e,t){e=M(e);Y(e.parentElement.children,function(e){T(e,t)});q(e,t)}function A(e,t){e=M(e);if(e.closest){return e.closest(t)}else{do{if(e==null||d(e,t)){return e}}while(e=e&&u(e));return null}}function N(e,t){if(t.indexOf(\"closest \")===0){return[A(e,t.substr(8))]}else if(t.indexOf(\"find \")===0){return[C(e,t.substr(5))]}else if(t.indexOf(\"next \")===0){return[I(e,t.substr(5))]}else if(t.indexOf(\"previous \")===0){return[k(e,t.substr(9))]}else if(t===\"document\"){return[document]}else if(t===\"window\"){return[window]}else{return $().querySelectorAll(t)}}var I=function(e,t){var r=$().querySelectorAll(t);for(var n=0;n<r.length;n++){var i=r[n];if(i.compareDocumentPosition(e)===Node.DOCUMENT_POSITION_PRECEDING){return i}}};var k=function(e,t){var r=$().querySelectorAll(t);for(var n=r.length-1;n>=0;n--){var i=r[n];if(i.compareDocumentPosition(e)===Node.DOCUMENT_POSITION_FOLLOWING){return i}}};function ie(e,t){if(t){return N(e,t)[0]}else{return N($().body,e)[0]}}function M(e){if(g(e,\"String\")){return C(e)}else{return e}}function P(e,t,r){if(p(t)){return{target:$().body,event:e,listener:t}}else{return{target:M(e),event:t,listener:r}}}function D(t,r,n){pr(function(){var e=P(t,r,n);e.target.addEventListener(e.event,e.listener)});var e=p(r);return e?r:n}function X(t,r,n){pr(function(){var e=P(t,r,n);e.target.removeEventListener(e.event,e.listener)});return p(r)?r:n}var ae=$().createElement(\"output\");function F(e,t){var r=Z(e,t);if(r){if(r===\"this\"){return[oe(e,t)]}else{var n=N(e,r);if(n.length===0){St('The selector \"'+r+'\" on '+t+\" returned no matches!\");return[ae]}else{return n}}}}function oe(e,t){return h(e,function(e){return J(e,t)!=null})}function se(e){var t=Z(e,\"hx-target\");if(t){if(t===\"this\"){return oe(e,\"hx-target\")}else{return ie(e,t)}}else{var r=K(e);if(r.boosted){return $().body}else{return e}}}function B(e){var t=z.config.attributesToSettle;for(var r=0;r<t.length;r++){if(e===t[r]){return true}}return false}function j(t,r){Y(t.attributes,function(e){if(!r.hasAttribute(e.name)&&B(e.name)){t.removeAttribute(e.name)}});Y(r.attributes,function(e){if(B(e.name)){t.setAttribute(e.name,e.value)}})}function U(e,t){var r=gr(t);for(var n=0;n<r.length;n++){var i=r[n];try{if(i.isInlineSwap(e)){return true}}catch(e){St(e)}}return e===\"outerHTML\"}function V(e,i,a){var t=\"#\"+i.id;var o=\"outerHTML\";if(e===\"true\"){}else if(e.indexOf(\":\")>0){o=e.substr(0,e.indexOf(\":\"));t=e.substr(e.indexOf(\":\")+1,e.length)}else{o=e}var r=$().querySelectorAll(t);if(r){Y(r,function(e){var t;var r=i.cloneNode(true);t=$().createDocumentFragment();t.appendChild(r);if(!U(o,e)){t=r}var n={shouldSwap:true,target:e,fragment:t};if(!ee(e,\"htmx:oobBeforeSwap\",n))return;e=n.target;if(n[\"shouldSwap\"]){Ce(o,e,e,t,a)}Y(a.elts,function(e){ee(e,\"htmx:oobAfterSwap\",n)})});i.parentNode.removeChild(i)}else{i.parentNode.removeChild(i);Q($().body,\"htmx:oobErrorNoTarget\",{content:i})}return e}function _(e,t,r){var n=Z(e,\"hx-select-oob\");if(n){var i=n.split(\",\");for(let e=0;e<i.length;e++){var a=i[e].split(\":\",2);var o=a[0];if(o.indexOf(\"#\")===0){o=o.substring(1)}var s=a[1]||\"true\";var l=t.querySelector(\"#\"+o);if(l){V(s,l,r)}}}Y(R(t,\"[hx-swap-oob], [data-hx-swap-oob]\"),function(e){var t=J(e,\"hx-swap-oob\");if(t!=null){V(t,e,r)}})}function W(e){Y(R(e,\"[hx-preserve], [data-hx-preserve]\"),function(e){var t=J(e,\"id\");var r=$().getElementById(t);if(r!=null){e.parentNode.replaceChild(r,e)}})}function le(n,e,i){Y(e.querySelectorAll(\"[id]\"),function(e){if(e.id&&e.id.length>0){var t=n.querySelector(e.tagName+\"[id='\"+e.id+\"']\");if(t&&t!==n){var r=e.cloneNode();j(e,t);i.tasks.push(function(){j(e,r)})}}})}function ue(e){return function(){T(e,z.config.addedClass);mt(e);ht(e);fe(e);ee(e,\"htmx:load\")}}function fe(e){var t=\"[autofocus]\";var r=d(e,t)?e:e.querySelector(t);if(r!=null){r.focus()}}function ce(e,t,r,n){le(e,r,n);while(r.childNodes.length>0){var i=r.firstChild;q(i,z.config.addedClass);e.insertBefore(i,t);if(i.nodeType!==Node.TEXT_NODE&&i.nodeType!==Node.COMMENT_NODE){n.tasks.push(ue(i))}}}function he(e,t){var r=0;while(r<e.length){t=(t<<5)-t+e.charCodeAt(r++)|0}return t}function de(e){var t=0;if(e.attributes){for(var r=0;r<e.attributes.length;r++){var n=e.attributes[r];if(n.value){t=he(n.name,t);t=he(n.value,t)}}}return t}function ve(e){var t=K(e);if(t.webSocket){t.webSocket.close()}if(t.sseEventSource){t.sseEventSource.close()}if(t.listenerInfos){Y(t.listenerInfos,function(e){if(e.on){e.on.removeEventListener(e.trigger,e.listener)}})}}function ge(e){ee(e,\"htmx:beforeCleanupElement\");ve(e);if(e.children){Y(e.children,function(e){ge(e)})}}function pe(e,t,r){if(e.tagName===\"BODY\"){return Se(e,t,r)}else{var n;var i=e.previousSibling;ce(u(e),e,t,r);if(i==null){n=u(e).firstChild}else{n=i.nextSibling}K(e).replacedWith=n;r.elts=[];while(n&&n!==e){if(n.nodeType===Node.ELEMENT_NODE){r.elts.push(n)}n=n.nextElementSibling}ge(e);u(e).removeChild(e)}}function me(e,t,r){return ce(e,e.firstChild,t,r)}function ye(e,t,r){return ce(u(e),e,t,r)}function xe(e,t,r){return ce(e,null,t,r)}function be(e,t,r){return ce(u(e),e.nextSibling,t,r)}function we(e,t,r){ge(e);return u(e).removeChild(e)}function Se(e,t,r){var n=e.firstChild;ce(e,n,t,r);if(n){while(n.nextSibling){ge(n.nextSibling);e.removeChild(n.nextSibling)}ge(n);e.removeChild(n)}}function Ee(e,t){var r=Z(e,\"hx-select\");if(r){var n=$().createDocumentFragment();Y(t.querySelectorAll(r),function(e){n.appendChild(e)});t=n}return t}function Ce(e,t,r,n,i){switch(e){case\"none\":return;case\"outerHTML\":pe(r,n,i);return;case\"afterbegin\":me(r,n,i);return;case\"beforebegin\":ye(r,n,i);return;case\"beforeend\":xe(r,n,i);return;case\"afterend\":be(r,n,i);return;case\"delete\":we(r,n,i);return;default:var a=gr(t);for(var o=0;o<a.length;o++){var f=a[o];try{var s=f.handleSwap(e,r,n,i);if(s){if(typeof s.length!==\"undefined\"){for(var l=0;l<s.length;l++){var u=s[l];if(u.nodeType!==Node.TEXT_NODE&&u.nodeType!==Node.COMMENT_NODE){i.tasks.push(ue(u))}}}return}}catch(e){St(e)}}if(e===\"innerHTML\"){Se(r,n,i)}else{Ce(z.config.defaultSwapStyle,t,r,n,i)}}}function Re(e){if(e.indexOf(\"<title\")>-1){var t=e.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\"\");var r=t.match(/<title(\\s[^>]*>|>)([\\s\\S]*?)<\\/title>/im);if(r){return r[2]}}}function Oe(e,t,r,n,i){i.title=Re(n);var a=f(n);if(a){_(r,a,i);a=Ee(r,a);W(a);return Ce(e,r,t,a,i)}}function qe(e,t,r){var n=e.getResponseHeader(t);if(n.indexOf(\"{\")===0){var i=w(n);for(var a in i){if(i.hasOwnProperty(a)){var o=i[a];if(!m(o)){o={value:o}}ee(r,a,o)}}}else{ee(r,n,[])}}var Te=/\\s/;var Le=/[\\s,]/;var He=/[_$a-zA-Z]/;var Ae=/[_$a-zA-Z0-9]/;var Ne=['\"',\"'\",\"/\"];var Ie=/[^\\s]/;function ke(e){var t=[];var r=0;while(r<e.length){if(He.exec(e.charAt(r))){var n=r;while(Ae.exec(e.charAt(r+1))){r++}t.push(e.substr(n,r-n+1))}else if(Ne.indexOf(e.charAt(r))!==-1){var i=e.charAt(r);var n=r;r++;while(r<e.length&&e.charAt(r)!==i){if(e.charAt(r)===\"\\\\\"){r++}r++}t.push(e.substr(n,r-n+1))}else{var a=e.charAt(r);t.push(a)}r++}return t}function Me(e,t,r){return He.exec(e.charAt(0))&&e!==\"true\"&&e!==\"false\"&&e!==\"this\"&&e!==r&&t!==\".\"}function Pe(e,t,r){if(t[0]===\"[\"){t.shift();var n=1;var i=\" return (function(\"+r+\"){ return (\";var a=null;while(t.length>0){var o=t[0];if(o===\"]\"){n--;if(n===0){if(a===null){i=i+\"true\"}t.shift();i+=\")})\";try{var s=Qt(e,function(){return Function(i)()},function(){return true});s.source=i;return s}catch(e){Q($().body,\"htmx:syntax:error\",{error:e,source:i});return null}}}else if(o===\"[\"){n++}if(Me(o,a,r)){i+=\"((\"+r+\".\"+o+\") ? (\"+r+\".\"+o+\") : (window.\"+o+\"))\"}else{i=i+o}a=t.shift()}}}function c(e,t){var r=\"\";while(e.length>0&&!e[0].match(t)){r+=e.shift()}return r}var De=\"input, textarea, select\";function Xe(e){var t=J(e,\"hx-trigger\");var r=[];if(t){var n=ke(t);do{c(n,Ie);var f=n.length;var i=c(n,/[,\\[\\s]/);if(i!==\"\"){if(i===\"every\"){var a={trigger:\"every\"};c(n,Ie);a.pollInterval=v(c(n,/[,\\[\\s]/));c(n,Ie);var o=Pe(e,n,\"event\");if(o){a.eventFilter=o}r.push(a)}else if(i.indexOf(\"sse:\")===0){r.push({trigger:\"sse\",sseEvent:i.substr(4)})}else{var s={trigger:i};var o=Pe(e,n,\"event\");if(o){s.eventFilter=o}while(n.length>0&&n[0]!==\",\"){c(n,Ie);var l=n.shift();if(l===\"changed\"){s.changed=true}else if(l===\"once\"){s.once=true}else if(l===\"consume\"){s.consume=true}else if(l===\"delay\"&&n[0]===\":\"){n.shift();s.delay=v(c(n,Le))}else if(l===\"from\"&&n[0]===\":\"){n.shift();var u=c(n,Le);if(u===\"closest\"||u===\"find\"||u===\"next\"||u===\"previous\"){n.shift();u+=\" \"+c(n,Le)}s.from=u}else if(l===\"target\"&&n[0]===\":\"){n.shift();s.target=c(n,Le)}else if(l===\"throttle\"&&n[0]===\":\"){n.shift();s.throttle=v(c(n,Le))}else if(l===\"queue\"&&n[0]===\":\"){n.shift();s.queue=c(n,Le)}else if((l===\"root\"||l===\"threshold\")&&n[0]===\":\"){n.shift();s[l]=c(n,Le)}else{Q(e,\"htmx:syntax:error\",{token:n.shift()})}}r.push(s)}}if(n.length===f){Q(e,\"htmx:syntax:error\",{token:n.shift()})}c(n,Ie)}while(n[0]===\",\"&&n.shift())}if(r.length>0){return r}else if(d(e,\"form\")){return[{trigger:\"submit\"}]}else if(d(e,'input[type=\"button\"]')){return[{trigger:\"click\"}]}else if(d(e,De)){return[{trigger:\"change\"}]}else{return[{trigger:\"click\"}]}}function Fe(e){K(e).cancelled=true}function Be(e,t,r){var n=K(e);n.timeout=setTimeout(function(){if(re(e)&&n.cancelled!==true){if(!We(r,xt(\"hx:poll:trigger\",{triggerSpec:r,target:e}))){t(e)}Be(e,t,r)}},r.pollInterval)}function je(e){return location.hostname===e.hostname&&G(e,\"href\")&&G(e,\"href\").indexOf(\"#\")!==0}function Ue(t,r,e){if(t.tagName===\"A\"&&je(t)&&(t.target===\"\"||t.target===\"_self\")||t.tagName===\"FORM\"){r.boosted=true;var n,i;if(t.tagName===\"A\"){n=\"get\";i=G(t,\"href\")}else{var a=G(t,\"method\");n=a?a.toLowerCase():\"get\";if(n===\"get\"){}i=G(t,\"action\")}e.forEach(function(e){ze(t,function(e,t){lr(n,i,e,t)},r,e,true)})}}function Ve(e,t){if(e.type===\"submit\"||e.type===\"click\"){if(t.tagName===\"FORM\"){return true}if(d(t,'input[type=\"submit\"], button')&&A(t,\"form\")!==null){return true}if(t.tagName===\"A\"&&t.href&&(t.getAttribute(\"href\")===\"#\"||t.getAttribute(\"href\").indexOf(\"#\")!==0)){return true}}return false}function _e(e,t){return K(e).boosted&&e.tagName===\"A\"&&t.type===\"click\"&&(t.ctrlKey||t.metaKey)}function We(e,t){var r=e.eventFilter;if(r){try{return r(t)!==true}catch(e){Q($().body,\"htmx:eventFilter:error\",{error:e,source:r.source});return true}}return false}function ze(a,o,e,s,l){var t;if(s.from){t=N(a,s.from)}else{t=[a]}Y(t,function(n){var i=function(e){if(!re(a)){n.removeEventListener(s.trigger,i);return}if(_e(a,e)){return}if(l||Ve(e,a)){e.preventDefault()}if(We(s,e)){return}var t=K(e);t.triggerSpec=s;if(t.handledFor==null){t.handledFor=[]}var r=K(a);if(t.handledFor.indexOf(a)<0){t.handledFor.push(a);if(s.consume){e.stopPropagation()}if(s.target&&e.target){if(!d(e.target,s.target)){return}}if(s.once){if(r.triggeredOnce){return}else{r.triggeredOnce=true}}if(s.changed){if(r.lastValue===a.value){return}else{r.lastValue=a.value}}if(r.delayed){clearTimeout(r.delayed)}if(r.throttle){return}if(s.throttle){if(!r.throttle){o(a,e);r.throttle=setTimeout(function(){r.throttle=null},s.throttle)}}else if(s.delay){r.delayed=setTimeout(function(){o(a,e)},s.delay)}else{o(a,e)}}};if(e.listenerInfos==null){e.listenerInfos=[]}e.listenerInfos.push({trigger:s.trigger,listener:i,on:n});n.addEventListener(s.trigger,i)})}var Ge=false;var Je=null;function $e(){if(!Je){Je=function(){Ge=true};window.addEventListener(\"scroll\",Je);setInterval(function(){if(Ge){Ge=false;Y($().querySelectorAll(\"[hx-trigger='revealed'],[data-hx-trigger='revealed']\"),function(e){Ze(e)})}},200)}}function Ze(t){if(!o(t,\"data-hx-revealed\")&&x(t)){t.setAttribute(\"data-hx-revealed\",\"true\");var e=K(t);if(e.initHash){ee(t,\"revealed\")}else{t.addEventListener(\"htmx:afterProcessNode\",function(e){ee(t,\"revealed\")},{once:true})}}}function Ke(e,t,r){var n=b(r);for(var i=0;i<n.length;i++){var a=n[i].split(/:(.+)/);if(a[0]===\"connect\"){Ye(e,a[1],0)}if(a[0]===\"send\"){et(e)}}}function Ye(s,r,n){if(!re(s)){return}if(r.indexOf(\"/\")==0){var e=location.hostname+(location.port?\":\"+location.port:\"\");if(location.protocol==\"https:\"){r=\"wss://\"+e+r}else if(location.protocol==\"http:\"){r=\"ws://\"+e+r}}var t=z.createWebSocket(r);t.onerror=function(e){Q(s,\"htmx:wsError\",{error:e,socket:t});Qe(s)};t.onclose=function(e){if([1006,1012,1013].indexOf(e.code)>=0){var t=tt(n);setTimeout(function(){Ye(s,r,n+1)},t)}};t.onopen=function(e){n=0};K(s).webSocket=t;t.addEventListener(\"message\",function(e){if(Qe(s)){return}var t=e.data;wt(s,function(e){t=e.transformResponse(t,null,s)});var r=Zt(s);var n=f(t);var i=y(n.children);for(var a=0;a<i.length;a++){var o=i[a];V(J(o,\"hx-swap-oob\")||\"true\",o,r)}At(r.tasks)})}function Qe(e){if(!re(e)){K(e).webSocket.close();return true}}function et(u){var f=h(u,function(e){return K(e).webSocket!=null});if(f){u.addEventListener(Xe(u)[0].trigger,function(e){var t=K(f).webSocket;var r=_t(u,f);var n=Bt(u,\"post\");var i=n.errors;var a=n.values;var o=rr(u);var s=ne(a,o);var l=Wt(s,u);l[\"HEADERS\"]=r;if(i&&i.length>0){ee(u,\"htmx:validation:halted\",i);return}t.send(JSON.stringify(l));if(Ve(e,u)){e.preventDefault()}})}else{Q(u,\"htmx:noWebSocketSourceError\")}}function tt(e){var t=z.config.wsReconnectDelay;if(typeof t===\"function\"){return t(e)}if(t===\"full-jitter\"){var r=Math.min(e,6);var n=1e3*Math.pow(2,r);return n*Math.random()}St('htmx.config.wsReconnectDelay must either be a function or the string \"full-jitter\"')}function rt(e,t,r){var n=b(r);for(var i=0;i<n.length;i++){var a=n[i].split(/:(.+)/);if(a[0]===\"connect\"){nt(e,a[1])}if(a[0]===\"swap\"){it(e,a[1])}}}function nt(t,e){var r=z.createEventSource(e);r.onerror=function(e){Q(t,\"htmx:sseError\",{error:e,source:r});ot(t)};K(t).sseEventSource=r}function it(a,o){var s=h(a,st);if(s){var l=K(s).sseEventSource;var u=function(e){if(ot(s)){l.removeEventListener(o,u);return}var t=e.data;wt(a,function(e){t=e.transformResponse(t,null,a)});var r=Gt(a);var n=se(a);var i=Zt(a);Oe(r.swapStyle,a,n,t,i);At(i.tasks);ee(a,\"htmx:sseMessage\",e)};K(a).sseListener=u;l.addEventListener(o,u)}else{Q(a,\"htmx:noSSESourceError\")}}function at(e,t,r){var n=h(e,st);if(n){var i=K(n).sseEventSource;var a=function(){if(!ot(n)){if(re(e)){t(e)}else{i.removeEventListener(r,a)}}};K(e).sseListener=a;i.addEventListener(r,a)}else{Q(e,\"htmx:noSSESourceError\")}}function ot(e){if(!re(e)){K(e).sseEventSource.close();return true}}function st(e){return K(e).sseEventSource!=null}function lt(e,t,r,n){var i=function(){if(!r.loaded){r.loaded=true;t(e)}};if(n){setTimeout(i,n)}else{i()}}function ut(t,i,e){var a=false;Y(n,function(r){if(o(t,\"hx-\"+r)){var n=J(t,\"hx-\"+r);a=true;i.path=n;i.verb=r;e.forEach(function(e){ft(t,e,i,function(e,t){lr(r,n,e,t)})})}});return a}function ft(n,e,t,r){if(e.sseEvent){at(n,r,e.sseEvent)}else if(e.trigger===\"revealed\"){$e();ze(n,r,t,e);Ze(n)}else if(e.trigger===\"intersect\"){var i={};if(e.root){i.root=ie(n,e.root)}if(e.threshold){i.threshold=parseFloat(e.threshold)}var a=new IntersectionObserver(function(e){for(var t=0;t<e.length;t++){var r=e[t];if(r.isIntersecting){ee(n,\"intersect\");break}}},i);a.observe(n);ze(n,r,t,e)}else if(e.trigger===\"load\"){if(!We(e,xt(\"load\",{elt:n}))){lt(n,r,t,e.delay)}}else if(e.pollInterval){t.polling=true;Be(n,r,e)}else{ze(n,r,t,e)}}function ct(e){if(e.type===\"text/javascript\"||e.type===\"module\"||e.type===\"\"){var t=$().createElement(\"script\");Y(e.attributes,function(e){t.setAttribute(e.name,e.value)});t.textContent=e.textContent;t.async=false;if(z.config.inlineScriptNonce){t.nonce=z.config.inlineScriptNonce}var r=e.parentElement;try{r.insertBefore(t,e)}catch(e){St(e)}finally{if(e.parentElement){e.parentElement.removeChild(e)}}}}function ht(e){if(d(e,\"script\")){ct(e)}Y(R(e,\"script\"),function(e){ct(e)})}function dt(){return document.querySelector(\"[hx-boost], [data-hx-boost]\")}function vt(e){if(e.querySelectorAll){var t=dt()?\", a, form\":\"\";var r=e.querySelectorAll(i+t+\", [hx-sse], [data-hx-sse], [hx-ws],\"+\" [data-hx-ws], [hx-ext], [data-hx-ext]\");return r}else{return[]}}function gt(n){var e=function(e){var t=A(e.target,\"button, input[type='submit']\");if(t!==null){var r=K(n);r.lastButtonClicked=t}};n.addEventListener(\"click\",e);n.addEventListener(\"focusin\",e);n.addEventListener(\"focusout\",function(e){var t=K(n);t.lastButtonClicked=null})}function pt(e){if(e.closest&&e.closest(z.config.disableSelector)){return}var t=K(e);if(t.initHash!==de(e)){t.initHash=de(e);ve(e);ee(e,\"htmx:beforeProcessNode\");if(e.value){t.lastValue=e.value}var r=Xe(e);var n=ut(e,t,r);if(!n&&Z(e,\"hx-boost\")===\"true\"){Ue(e,t,r)}if(e.tagName===\"FORM\"){gt(e)}var i=J(e,\"hx-sse\");if(i){rt(e,t,i)}var a=J(e,\"hx-ws\");if(a){Ke(e,t,a)}ee(e,\"htmx:afterProcessNode\")}}function mt(e){e=M(e);pt(e);Y(vt(e),function(e){pt(e)})}function yt(e){return e.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase()}function xt(e,t){var r;if(window.CustomEvent&&typeof window.CustomEvent===\"function\"){r=new CustomEvent(e,{bubbles:true,cancelable:true,detail:t})}else{r=$().createEvent(\"CustomEvent\");r.initCustomEvent(e,true,true,t)}return r}function Q(e,t,r){ee(e,t,ne({error:t},r))}function bt(e){return e===\"htmx:afterProcessNode\"}function wt(e,t){Y(gr(e),function(e){try{t(e)}catch(e){St(e)}})}function St(e){if(console.error){console.error(e)}else if(console.log){console.log(\"ERROR: \",e)}}function ee(e,t,r){e=M(e);if(r==null){r={}}r[\"elt\"]=e;var n=xt(t,r);if(z.logger&&!bt(t)){z.logger(e,t,r)}if(r.error){St(r.error);ee(e,\"htmx:error\",{errorInfo:r})}var i=e.dispatchEvent(n);var a=yt(t);if(i&&a!==t){var o=xt(a,n.detail);i=i&&e.dispatchEvent(o)}wt(e,function(e){i=i&&e.onEvent(t,n)!==false});return i}var Et=location.pathname+location.search;function Ct(){var e=$().querySelector(\"[hx-history-elt],[data-hx-history-elt]\");return e||$().body}function Rt(e,t,r,n){if(!S()){return}var i=w(localStorage.getItem(\"htmx-history-cache\"))||[];for(var a=0;a<i.length;a++){if(i[a].url===e){i.splice(a,1);break}}var o={url:e,content:t,title:r,scroll:n};ee($().body,\"htmx:historyItemCreated\",{item:o,cache:i});i.push(o);while(i.length>z.config.historyCacheSize){i.shift()}while(i.length>0){try{localStorage.setItem(\"htmx-history-cache\",JSON.stringify(i));break}catch(e){Q($().body,\"htmx:historyCacheError\",{cause:e,cache:i});i.shift()}}}function Ot(e){if(!S()){return null}var t=w(localStorage.getItem(\"htmx-history-cache\"))||[];for(var r=0;r<t.length;r++){if(t[r].url===e){return t[r]}}return null}function qt(e){var t=z.config.requestClass;var r=e.cloneNode(true);Y(R(r,\".\"+t),function(e){T(e,t)});return r.innerHTML}function Tt(){var e=Ct();var t=Et||location.pathname+location.search;var r=$().querySelector('[hx-history=\"false\" i],[data-hx-history=\"false\" i]');if(!r){ee($().body,\"htmx:beforeHistorySave\",{path:t,historyElt:e});Rt(t,qt(e),$().title,window.scrollY)}if(z.config.historyEnabled)history.replaceState({htmx:true},$().title,window.location.href)}function Lt(e){if(z.config.getCacheBusterParam){e=e.replace(/org\\.htmx\\.cache-buster=[^&]*&?/,\"\");if(e.endsWith(\"&\")||e.endsWith(\"?\")){e=e.slice(0,-1)}}if(z.config.historyEnabled){history.pushState({htmx:true},\"\",e)}Et=e}function Ht(e){if(z.config.historyEnabled)history.replaceState({htmx:true},\"\",e);Et=e}function At(e){Y(e,function(e){e.call()})}function Nt(a){var e=new XMLHttpRequest;var o={path:a,xhr:e};ee($().body,\"htmx:historyCacheMiss\",o);e.open(\"GET\",a,true);e.setRequestHeader(\"HX-History-Restore-Request\",\"true\");e.onload=function(){if(this.status>=200&&this.status<400){ee($().body,\"htmx:historyCacheMissLoad\",o);var e=f(this.response);e=e.querySelector(\"[hx-history-elt],[data-hx-history-elt]\")||e;var t=Ct();var r=Zt(t);var n=Re(this.response);if(n){var i=C(\"title\");if(i){i.innerHTML=n}else{window.document.title=n}}Se(t,e,r);At(r.tasks);Et=a;ee($().body,\"htmx:historyRestore\",{path:a,cacheMiss:true,serverResponse:this.response})}else{Q($().body,\"htmx:historyCacheMissLoadError\",o)}};e.send()}function It(e){Tt();e=e||location.pathname+location.search;var t=Ot(e);if(t){var r=f(t.content);var n=Ct();var i=Zt(n);Se(n,r,i);At(i.tasks);document.title=t.title;window.scrollTo(0,t.scroll);Et=e;ee($().body,\"htmx:historyRestore\",{path:e,item:t})}else{if(z.config.refreshOnHistoryMiss){window.location.reload(true)}else{Nt(e)}}}function kt(e){var t=F(e,\"hx-indicator\");if(t==null){t=[e]}Y(t,function(e){var t=K(e);t.requestCount=(t.requestCount||0)+1;e.classList[\"add\"].call(e.classList,z.config.requestClass)});return t}function Mt(e){Y(e,function(e){var t=K(e);t.requestCount=(t.requestCount||0)-1;if(t.requestCount===0){e.classList[\"remove\"].call(e.classList,z.config.requestClass)}})}function Pt(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.isSameNode(t)){return true}}return false}function Dt(e){if(e.name===\"\"||e.name==null||e.disabled){return false}if(e.type===\"button\"||e.type===\"submit\"||e.tagName===\"image\"||e.tagName===\"reset\"||e.tagName===\"file\"){return false}if(e.type===\"checkbox\"||e.type===\"radio\"){return e.checked}return true}function Xt(t,r,n,e,i){if(e==null||Pt(t,e)){return}else{t.push(e)}if(Dt(e)){var a=G(e,\"name\");var o=e.value;if(e.multiple){o=y(e.querySelectorAll(\"option:checked\")).map(function(e){return e.value})}if(e.files){o=y(e.files)}if(a!=null&&o!=null){var s=r[a];if(s!==undefined){if(Array.isArray(s)){if(Array.isArray(o)){r[a]=s.concat(o)}else{s.push(o)}}else{if(Array.isArray(o)){r[a]=[s].concat(o)}else{r[a]=[s,o]}}}else{r[a]=o}}if(i){Ft(e,n)}}if(d(e,\"form\")){var l=e.elements;Y(l,function(e){Xt(t,r,n,e,i)})}}function Ft(e,t){if(e.willValidate){ee(e,\"htmx:validation:validate\");if(!e.checkValidity()){t.push({elt:e,message:e.validationMessage,validity:e.validity});ee(e,\"htmx:validation:failed\",{message:e.validationMessage,validity:e.validity})}}}function Bt(e,t){var r=[];var n={};var i={};var a=[];var o=K(e);var s=d(e,\"form\")&&e.noValidate!==true||J(e,\"hx-validate\")===\"true\";if(o.lastButtonClicked){s=s&&o.lastButtonClicked.formNoValidate!==true}if(t!==\"get\"){Xt(r,i,a,A(e,\"form\"),s)}Xt(r,n,a,e,s);if(o.lastButtonClicked){var l=G(o.lastButtonClicked,\"name\");if(l){n[l]=o.lastButtonClicked.value}}var u=F(e,\"hx-include\");Y(u,function(e){Xt(r,n,a,e,s);if(!d(e,\"form\")){Y(e.querySelectorAll(De),function(e){Xt(r,n,a,e,s)})}});n=ne(n,i);return{errors:a,values:n}}function jt(e,t,r){if(e!==\"\"){e+=\"&\"}if(String(r)===\"[object Object]\"){r=JSON.stringify(r)}var n=encodeURIComponent(r);e+=encodeURIComponent(t)+\"=\"+n;return e}function Ut(e){var t=\"\";for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){Y(n,function(e){t=jt(t,r,e)})}else{t=jt(t,r,n)}}}return t}function Vt(e){var t=new FormData;for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){Y(n,function(e){t.append(r,e)})}else{t.append(r,n)}}}return t}function _t(e,t,r){var n={\"HX-Request\":\"true\",\"HX-Trigger\":G(e,\"id\"),\"HX-Trigger-Name\":G(e,\"name\"),\"HX-Target\":J(t,\"id\"),\"HX-Current-URL\":$().location.href};Yt(e,\"hx-headers\",false,n);if(r!==undefined){n[\"HX-Prompt\"]=r}if(K(e).boosted){n[\"HX-Boosted\"]=\"true\"}return n}function Wt(t,e){var r=Z(e,\"hx-params\");if(r){if(r===\"none\"){return{}}else if(r===\"*\"){return t}else if(r.indexOf(\"not \")===0){Y(r.substr(4).split(\",\"),function(e){e=e.trim();delete t[e]});return t}else{var n={};Y(r.split(\",\"),function(e){e=e.trim();n[e]=t[e]});return n}}else{return t}}function zt(e){return G(e,\"href\")&&G(e,\"href\").indexOf(\"#\")>=0}function Gt(e,t){var r=t?t:Z(e,\"hx-swap\");var n={swapStyle:K(e).boosted?\"innerHTML\":z.config.defaultSwapStyle,swapDelay:z.config.defaultSwapDelay,settleDelay:z.config.defaultSettleDelay};if(K(e).boosted&&!zt(e)){n[\"show\"]=\"top\"}if(r){var i=b(r);if(i.length>0){n[\"swapStyle\"]=i[0];for(var a=1;a<i.length;a++){var o=i[a];if(o.indexOf(\"swap:\")===0){n[\"swapDelay\"]=v(o.substr(5))}if(o.indexOf(\"settle:\")===0){n[\"settleDelay\"]=v(o.substr(7))}if(o.indexOf(\"scroll:\")===0){var s=o.substr(7);var l=s.split(\":\");var f=l.pop();var u=l.length>0?l.join(\":\"):null;n[\"scroll\"]=f;n[\"scrollTarget\"]=u}if(o.indexOf(\"show:\")===0){var c=o.substr(5);var l=c.split(\":\");var h=l.pop();var u=l.length>0?l.join(\":\"):null;n[\"show\"]=h;n[\"showTarget\"]=u}if(o.indexOf(\"focus-scroll:\")===0){var d=o.substr(\"focus-scroll:\".length);n[\"focusScroll\"]=d==\"true\"}}}}return n}function Jt(e){return Z(e,\"hx-encoding\")===\"multipart/form-data\"||d(e,\"form\")&&G(e,\"enctype\")===\"multipart/form-data\"}function $t(t,r,n){var i=null;wt(r,function(e){if(i==null){i=e.encodeParameters(t,n,r)}});if(i!=null){return i}else{if(Jt(r)){return Vt(n)}else{return Ut(n)}}}function Zt(e){return{tasks:[],elts:[e]}}function Kt(e,t){var r=e[0];var n=e[e.length-1];if(t.scroll){var i=null;if(t.scrollTarget){i=ie(r,t.scrollTarget)}if(t.scroll===\"top\"&&(r||i)){i=i||r;i.scrollTop=0}if(t.scroll===\"bottom\"&&(n||i)){i=i||n;i.scrollTop=i.scrollHeight}}if(t.show){var i=null;if(t.showTarget){var a=t.showTarget;if(t.showTarget===\"window\"){a=\"body\"}i=ie(r,a)}if(t.show===\"top\"&&(r||i)){i=i||r;i.scrollIntoView({block:\"start\",behavior:z.config.scrollBehavior})}if(t.show===\"bottom\"&&(n||i)){i=i||n;i.scrollIntoView({block:\"end\",behavior:z.config.scrollBehavior})}}}function Yt(e,t,r,n){if(n==null){n={}}if(e==null){return n}var i=J(e,t);if(i){var a=i.trim();var o=r;if(a===\"unset\"){return null}if(a.indexOf(\"javascript:\")===0){a=a.substr(11);o=true}else if(a.indexOf(\"js:\")===0){a=a.substr(3);o=true}if(a.indexOf(\"{\")!==0){a=\"{\"+a+\"}\"}var s;if(o){s=Qt(e,function(){return Function(\"return (\"+a+\")\")()},{})}else{s=w(a)}for(var l in s){if(s.hasOwnProperty(l)){if(n[l]==null){n[l]=s[l]}}}}return Yt(u(e),t,r,n)}function Qt(e,t,r){if(z.config.allowEval){return t()}else{Q(e,\"htmx:evalDisallowedError\");return r}}function er(e,t){return Yt(e,\"hx-vars\",true,t)}function tr(e,t){return Yt(e,\"hx-vals\",false,t)}function rr(e){return ne(er(e),tr(e))}function nr(t,r,n){if(n!==null){try{t.setRequestHeader(r,n)}catch(e){t.setRequestHeader(r,encodeURIComponent(n));t.setRequestHeader(r+\"-URI-AutoEncoded\",\"true\")}}}function ir(t){if(t.responseURL&&typeof URL!==\"undefined\"){try{var e=new URL(t.responseURL);return e.pathname+e.search}catch(e){Q($().body,\"htmx:badResponseUrl\",{url:t.responseURL})}}}function ar(e,t){return e.getAllResponseHeaders().match(t)}function or(e,t,r){e=e.toLowerCase();if(r){if(r instanceof Element||g(r,\"String\")){return lr(e,t,null,null,{targetOverride:M(r),returnPromise:true})}else{return lr(e,t,M(r.source),r.event,{handler:r.handler,headers:r.headers,values:r.values,targetOverride:M(r.target),swapOverride:r.swap,returnPromise:true})}}else{return lr(e,t,null,null,{returnPromise:true})}}function sr(e){var t=[];while(e){t.push(e);e=e.parentElement}return t}function lr(e,t,n,r,i,f){var c=null;var h=null;i=i!=null?i:{};if(i.returnPromise&&typeof Promise!==\"undefined\"){var d=new Promise(function(e,t){c=e;h=t})}if(n==null){n=$().body}var v=i.handler||fr;if(!re(n)){return}var g=i.targetOverride||se(n);if(g==null||g==ae){Q(n,\"htmx:targetError\",{target:J(n,\"hx-target\")});return}if(!f){var p=function(){return lr(e,t,n,r,i,true)};var m={target:g,elt:n,path:t,verb:e,triggeringEvent:r,etc:i,issueRequest:p};if(ee(n,\"htmx:confirm\",m)===false){return}}var y=n;var a=K(n);var x=Z(n,\"hx-sync\");var b=null;var w=false;if(x){var S=x.split(\":\");var E=S[0].trim();if(E===\"this\"){y=oe(n,\"hx-sync\")}else{y=ie(n,E)}x=(S[1]||\"drop\").trim();a=K(y);if(x===\"drop\"&&a.xhr&&a.abortable!==true){return}else if(x===\"abort\"){if(a.xhr){return}else{w=true}}else if(x===\"replace\"){ee(y,\"htmx:abort\")}else if(x.indexOf(\"queue\")===0){var C=x.split(\" \");b=(C[1]||\"last\").trim()}}if(a.xhr){if(a.abortable){ee(y,\"htmx:abort\")}else{if(b==null){if(r){var R=K(r);if(R&&R.triggerSpec&&R.triggerSpec.queue){b=R.triggerSpec.queue}}if(b==null){b=\"last\"}}if(a.queuedRequests==null){a.queuedRequests=[]}if(b===\"first\"&&a.queuedRequests.length===0){a.queuedRequests.push(function(){lr(e,t,n,r,i)})}else if(b===\"all\"){a.queuedRequests.push(function(){lr(e,t,n,r,i)})}else if(b===\"last\"){a.queuedRequests=[];a.queuedRequests.push(function(){lr(e,t,n,r,i)})}return}}var o=new XMLHttpRequest;a.xhr=o;a.abortable=w;var s=function(){a.xhr=null;a.abortable=false;if(a.queuedRequests!=null&&a.queuedRequests.length>0){var e=a.queuedRequests.shift();e()}};var O=Z(n,\"hx-prompt\");if(O){var q=prompt(O);if(q===null||!ee(n,\"htmx:prompt\",{prompt:q,target:g})){te(c);s();return d}}var T=Z(n,\"hx-confirm\");if(T){if(!confirm(T)){te(c);s();return d}}var L=_t(n,g,q);if(i.headers){L=ne(L,i.headers)}var H=Bt(n,e);var A=H.errors;var N=H.values;if(i.values){N=ne(N,i.values)}var I=rr(n);var k=ne(N,I);var M=Wt(k,n);if(e!==\"get\"&&!Jt(n)){L[\"Content-Type\"]=\"application/x-www-form-urlencoded\"}if(z.config.getCacheBusterParam&&e===\"get\"){M[\"org.htmx.cache-buster\"]=G(g,\"id\")||\"true\"}if(t==null||t===\"\"){t=$().location.href}var P=Yt(n,\"hx-request\");var D=K(n).boosted;var l={boosted:D,parameters:M,unfilteredParameters:k,headers:L,target:g,verb:e,errors:A,withCredentials:i.credentials||P.credentials||z.config.withCredentials,timeout:i.timeout||P.timeout||z.config.timeout,path:t,triggeringEvent:r};if(!ee(n,\"htmx:configRequest\",l)){te(c);s();return d}t=l.path;e=l.verb;L=l.headers;M=l.parameters;A=l.errors;if(A&&A.length>0){ee(n,\"htmx:validation:halted\",l);te(c);s();return d}var X=t.split(\"#\");var F=X[0];var B=X[1];var j=null;if(e===\"get\"){j=F;var U=Object.keys(M).length!==0;if(U){if(j.indexOf(\"?\")<0){j+=\"?\"}else{j+=\"&\"}j+=Ut(M);if(B){j+=\"#\"+B}}o.open(\"GET\",j,true)}else{o.open(e.toUpperCase(),t,true)}o.overrideMimeType(\"text/html\");o.withCredentials=l.withCredentials;o.timeout=l.timeout;if(P.noHeaders){}else{for(var V in L){if(L.hasOwnProperty(V)){var _=L[V];nr(o,V,_)}}}var u={xhr:o,target:g,requestConfig:l,etc:i,boosted:D,pathInfo:{requestPath:t,finalRequestPath:j||t,anchor:B}};o.onload=function(){try{var e=sr(n);u.pathInfo.responsePath=ir(o);v(n,u);Mt(W);ee(n,\"htmx:afterRequest\",u);ee(n,\"htmx:afterOnLoad\",u);if(!re(n)){var t=null;while(e.length>0&&t==null){var r=e.shift();if(re(r)){t=r}}if(t){ee(t,\"htmx:afterRequest\",u);ee(t,\"htmx:afterOnLoad\",u)}}te(c);s()}catch(e){Q(n,\"htmx:onLoadError\",ne({error:e},u));throw e}};o.onerror=function(){Mt(W);Q(n,\"htmx:afterRequest\",u);Q(n,\"htmx:sendError\",u);te(h);s()};o.onabort=function(){Mt(W);Q(n,\"htmx:afterRequest\",u);Q(n,\"htmx:sendAbort\",u);te(h);s()};o.ontimeout=function(){Mt(W);Q(n,\"htmx:afterRequest\",u);Q(n,\"htmx:timeout\",u);te(h);s()};if(!ee(n,\"htmx:beforeRequest\",u)){te(c);s();return d}var W=kt(n);Y([\"loadstart\",\"loadend\",\"progress\",\"abort\"],function(t){Y([o,o.upload],function(e){e.addEventListener(t,function(e){ee(n,\"htmx:xhr:\"+t,{lengthComputable:e.lengthComputable,loaded:e.loaded,total:e.total})})})});ee(n,\"htmx:beforeSend\",u);o.send(e===\"get\"?null:$t(o,n,M));return d}function ur(e,t){var r=t.xhr;var n=null;var i=null;if(ar(r,/HX-Push:/i)){n=r.getResponseHeader(\"HX-Push\");i=\"push\"}else if(ar(r,/HX-Push-Url:/i)){n=r.getResponseHeader(\"HX-Push-Url\");i=\"push\"}else if(ar(r,/HX-Replace-Url:/i)){n=r.getResponseHeader(\"HX-Replace-Url\");i=\"replace\"}if(n){if(n===\"false\"){return{}}else{return{type:i,path:n}}}var a=t.pathInfo.finalRequestPath;var o=t.pathInfo.responsePath;var s=Z(e,\"hx-push-url\");var f=Z(e,\"hx-replace-url\");var c=K(e).boosted;var l=null;var u=null;if(s){l=\"push\";u=s}else if(f){l=\"replace\";u=f}else if(c){l=\"push\";u=o||a}if(u){if(u===\"false\"){return{}}if(u===\"true\"){u=o||a}if(t.pathInfo.anchor&&u.indexOf(\"#\")===-1){u=u+\"#\"+t.pathInfo.anchor}return{type:l,path:u}}else{return{}}}function fr(s,l){var u=l.xhr;var f=l.target;var n=l.etc;if(!ee(s,\"htmx:beforeOnLoad\",l))return;if(ar(u,/HX-Trigger:/i)){qe(u,\"HX-Trigger\",s)}if(ar(u,/HX-Location:/i)){Tt();var e=u.getResponseHeader(\"HX-Location\");var c;if(e.indexOf(\"{\")===0){c=w(e);e=c[\"path\"];delete c[\"path\"]}or(\"GET\",e,c).then(function(){Lt(e)});return}if(ar(u,/HX-Redirect:/i)){location.href=u.getResponseHeader(\"HX-Redirect\");return}if(ar(u,/HX-Refresh:/i)){if(\"true\"===u.getResponseHeader(\"HX-Refresh\")){location.reload();return}}if(ar(u,/HX-Retarget:/i)){l.target=$().querySelector(u.getResponseHeader(\"HX-Retarget\"))}var h=ur(s,l);var i=u.status>=200&&u.status<400&&u.status!==204;var d=u.response;var t=u.status>=400;var r=ne({shouldSwap:i,serverResponse:d,isError:t},l);if(!ee(f,\"htmx:beforeSwap\",r))return;f=r.target;d=r.serverResponse;t=r.isError;l.failed=t;l.successful=!t;if(r.shouldSwap){if(u.status===286){Fe(s)}wt(s,function(e){d=e.transformResponse(d,u,s)});if(h.type){Tt()}var a=n.swapOverride;if(ar(u,/HX-Reswap:/i)){a=u.getResponseHeader(\"HX-Reswap\")}var c=Gt(s,a);f.classList.add(z.config.swappingClass);var o=function(){try{var e=document.activeElement;var t={};try{t={elt:e,start:e?e.selectionStart:null,end:e?e.selectionEnd:null}}catch(e){}var n=Zt(f);Oe(c.swapStyle,f,s,d,n);if(t.elt&&!re(t.elt)&&t.elt.id){var r=document.getElementById(t.elt.id);var i={preventScroll:c.focusScroll!==undefined?!c.focusScroll:!z.config.defaultFocusScroll};if(r){if(t.start&&r.setSelectionRange){try{r.setSelectionRange(t.start,t.end)}catch(e){}}r.focus(i)}}f.classList.remove(z.config.swappingClass);Y(n.elts,function(e){if(e.classList){e.classList.add(z.config.settlingClass)}ee(e,\"htmx:afterSwap\",l)});if(ar(u,/HX-Trigger-After-Swap:/i)){var a=s;if(!re(s)){a=$().body}qe(u,\"HX-Trigger-After-Swap\",a)}var o=function(){Y(n.tasks,function(e){e.call()});Y(n.elts,function(e){if(e.classList){e.classList.remove(z.config.settlingClass)}ee(e,\"htmx:afterSettle\",l)});if(h.type){if(h.type===\"push\"){Lt(h.path);ee($().body,\"htmx:pushedIntoHistory\",{path:h.path})}else{Ht(h.path);ee($().body,\"htmx:replacedInHistory\",{path:h.path})}}if(l.pathInfo.anchor){var e=C(\"#\"+l.pathInfo.anchor);if(e){e.scrollIntoView({block:\"start\",behavior:\"auto\"})}}if(n.title){var t=C(\"title\");if(t){t.innerHTML=n.title}else{window.document.title=n.title}}Kt(n.elts,c);if(ar(u,/HX-Trigger-After-Settle:/i)){var r=s;if(!re(s)){r=$().body}qe(u,\"HX-Trigger-After-Settle\",r)}};if(c.settleDelay>0){setTimeout(o,c.settleDelay)}else{o()}}catch(e){Q(s,\"htmx:swapError\",l);throw e}};if(c.swapDelay>0){setTimeout(o,c.swapDelay)}else{o()}}if(t){Q(s,\"htmx:responseError\",ne({error:\"Response Status Error Code \"+u.status+\" from \"+l.pathInfo.requestPath},l))}}var cr={};function hr(){return{init:function(e){return null},onEvent:function(e,t){return true},transformResponse:function(e,t,r){return e},isInlineSwap:function(e){return false},handleSwap:function(e,t,r,n){return false},encodeParameters:function(e,t,r){return null}}}function dr(e,t){if(t.init){t.init(r)}cr[e]=ne(hr(),t)}function vr(e){delete cr[e]}function gr(e,r,n){if(e==undefined){return r}if(r==undefined){r=[]}if(n==undefined){n=[]}var t=J(e,\"hx-ext\");if(t){Y(t.split(\",\"),function(e){e=e.replace(/ /g,\"\");if(e.slice(0,7)==\"ignore:\"){n.push(e.slice(7));return}if(n.indexOf(e)<0){var t=cr[e];if(t&&r.indexOf(t)<0){r.push(t)}}})}return gr(u(e),r,n)}function pr(e){if($().readyState!==\"loading\"){e()}else{$().addEventListener(\"DOMContentLoaded\",e)}}function mr(){if(z.config.includeIndicatorStyles!==false){$().head.insertAdjacentHTML(\"beforeend\",\"<style>                      .\"+z.config.indicatorClass+\"{opacity:0;transition: opacity 200ms ease-in;}                      .\"+z.config.requestClass+\" .\"+z.config.indicatorClass+\"{opacity:1}                      .\"+z.config.requestClass+\".\"+z.config.indicatorClass+\"{opacity:1}                    </style>\")}}function yr(){var e=$().querySelector('meta[name=\"htmx-config\"]');if(e){return w(e.content)}else{return null}}function xr(){var e=yr();if(e){z.config=ne(z.config,e)}}pr(function(){xr();mr();var e=$().body;mt(e);var t=$().querySelectorAll(\"[hx-trigger='restored'],[data-hx-trigger='restored']\");e.addEventListener(\"htmx:abort\",function(e){var t=e.target;var r=K(t);if(r&&r.xhr){r.xhr.abort()}});window.onpopstate=function(e){if(e.state&&e.state.htmx){It();Y(t,function(e){ee(e,\"htmx:restored\",{document:$(),triggerEvent:ee})})}};setTimeout(function(){ee(e,\"htmx:load\",{})},0)});return z}()});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/htmx.org/dist/htmx.min.js\n");

/***/ }),

/***/ "./assets/css/app.scss":
/*!*****************************!*\
  !*** ./assets/css/app.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvY3NzL2FwcC5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Fzc2V0cy9jc3MvYXBwLnNjc3M/ZjI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/css/app.scss\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/css/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;